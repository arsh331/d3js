{"ast":null,"code":"var _jsxFileName = \"/gsoc/git/d3js/src/Data.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NetworkChart from \"./NetworkChart\";\nimport Network from \"./Network\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = () => {\n  _s();\n  var artist_mbid = \"b8a7c51f-362c-4dcb-a259-bc6e0095f0a6\";\n  var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n  const [similarArtists, setSimilarArtists] = useState([]);\n  const [artist, setArtist] = useState(\"\");\n  var transformedArtists = {};\n  const fetchData = artist_mbid => {\n    fetch(url + artist_mbid).then(response => response.json()).then(data => setData(data));\n  };\n  const setData = data => {\n    setArtist(data[1]);\n    setSimilarArtists(data[3]);\n  };\n  useEffect(() => {\n    fetchData(artist_mbid);\n  }, []);\n  var artistList = similarArtists && similarArtists.data && similarArtists.data.map(artist => artist.artist_mbid);\n  var mainArtist = artist && artist.data && artist.data[0].artist_mbid;\n  artistList && artistList.push(mainArtist);\n  transformedArtists = artistList && {\n    \"nodes\": artistList.map(artist => {\n      return {\n        \"id\": artist\n      };\n    }),\n    \"links\": artistList.map(artist => {\n      return {\n        \"source\": mainArtist,\n        \"target\": artist\n      };\n    })\n  };\n  const logGraph = () => {\n    console.log(artist_mbid);\n    artist_mbid = document.getElementById(\"artist_name\").value;\n    console.log(document.getElementById(\"artist_name\").value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter artist mbid:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"artist_name\",\n        name: \"artist_name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: logGraph,\n      children: \"Log graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NetworkChart, {\n      data: transformedArtists,\n      fetchData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(Data, \"QGC6pfeN9kngUkSusChZ+5ra1A8=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useState","useEffect","NetworkChart","Network","jsxDEV","_jsxDEV","Data","_s","artist_mbid","url","similarArtists","setSimilarArtists","artist","setArtist","transformedArtists","fetchData","fetch","then","response","json","data","setData","artistList","map","mainArtist","push","logGraph","console","log","document","getElementById","value","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","onClick","_c","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/Data.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport NetworkChart from \"./NetworkChart\";\nimport Network from \"./Network\";\n\nconst Data = () => {\n    var artist_mbid = \"b8a7c51f-362c-4dcb-a259-bc6e0095f0a6\";\n    var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n    const [similarArtists, setSimilarArtists] = useState([]);\n    const [artist, setArtist] = useState(\"\");\n    \n    var transformedArtists = {}; \n\n    const fetchData = (artist_mbid) => {\n        fetch(url + artist_mbid)\n        .then((response) => response.json())\n        .then((data) => setData(data))   \n    }\n    \n    const setData = (data) => {\n        setArtist(data[1]);\n        setSimilarArtists(data[3]);\n    }\n    \n    useEffect(() => {\n        fetchData(artist_mbid);\n    }, []);\n\n      \n    var artistList = similarArtists && similarArtists.data && (similarArtists.data.map((artist) => artist.artist_mbid));\n    \n    var mainArtist = artist && artist.data && artist.data[0].artist_mbid;\n    artistList && artistList.push(mainArtist);\n        \n    transformedArtists = artistList && {\n        \"nodes\": artistList.map((artist) => {\n            return{\n                \"id\": artist,\n            };\n        }),\n        \"links\": artistList.map((artist) => {\n            return{\n                \"source\": mainArtist,\n                \"target\": artist\n                };\n        }),\n    }\n    \n    const logGraph = () => {\n        console.log(artist_mbid);\n        artist_mbid = document.getElementById(\"artist_name\").value;\n        console.log(document.getElementById(\"artist_name\").value);\n    }\n\n    return (\n        <div>\n            <form> \n                <label>\n                    Enter artist mbid:\n                </label>              \n                <input type=\"text\" id=\"artist_name\" name=\"artist_name\"></input>  \n            </form>\n            <button onClick={logGraph}>Log graph</button>\n            <NetworkChart data={transformedArtists} fetchData={fetchData}/>\n        </div>\n    );\n}\n\nexport default Data;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}