{"ast":null,"code":"var _jsxFileName = \"/gsoc/git/d3js/src/artist-search/Test.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test = () => {\n  const searchQuery = \"The Beatles\";\n  async searchQuery => {\n    var resultsArray = [];\n    const UNDEFINED_PROPERTY = \"Unknown\";\n    const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n    // Fetches the artists from the MusicBrainz API\n\n    throttle(async () => {\n      try {\n        const response = await fetch(LOOKUP_URL);\n        const data = await response.json();\n        processData(data);\n        console.log(data);\n      } catch (error) {\n        alert(error);\n      }\n    }, 800, {\n      leading: false,\n      trailing: true\n    });\n    const processData = dataResponse => {\n      resultsArray = dataResponse.artists.map(artist => {\n        var _artist$id, _artist$type, _artist$name, _artist$country;\n        return {\n          id: (_artist$id = artist.id) !== null && _artist$id !== void 0 ? _artist$id : UNDEFINED_PROPERTY,\n          type: (_artist$type = artist.type) !== null && _artist$type !== void 0 ? _artist$type : UNDEFINED_PROPERTY,\n          name: (_artist$name = artist.name) !== null && _artist$name !== void 0 ? _artist$name : UNDEFINED_PROPERTY,\n          country: (_artist$country = artist.country) !== null && _artist$country !== void 0 ? _artist$country : UNDEFINED_PROPERTY\n        };\n      });\n    };\n    return resultsArray;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Test","searchQuery","resultsArray","UNDEFINED_PROPERTY","LOOKUP_URL","throttle","response","fetch","data","json","processData","console","log","error","alert","leading","trailing","dataResponse","artists","map","artist","_artist$id","_artist$type","_artist$name","_artist$country","id","type","name","country","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/artist-search/Test.tsx"],"sourcesContent":["import React from \"react\";\nimport ArtistLookup, { ArtistType } from \"./ArtistLookup\";\nimport { ArtistLookupResponseType } from \"./ArtistLookup\";\nconst Test = () => {\n    const searchQuery = \"The Beatles\";\n    async (searchQuery: string): Promise<Array<ArtistType>> => {\n        var resultsArray: Array<ArtistType> = [];\n        const UNDEFINED_PROPERTY = \"Unknown\";\n        const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n        // Fetches the artists from the MusicBrainz API\n    \n            throttle(\n            async(): Promise<void> => {\n            try {\n                const response = await fetch(LOOKUP_URL);\n                const data = await response.json();\n                processData(data);\n                console.log(data);   \n            }\n            catch(error){\n                alert(error);\n            }\n        }, 800, {leading: false, trailing: true});\n        \n        const processData = (dataResponse: ArtistLookupResponseType): void => {   \n            resultsArray = dataResponse.artists.map((artist) => {\n                return {\n                    id: artist.id ?? UNDEFINED_PROPERTY,\n                    type: artist.type ?? UNDEFINED_PROPERTY,\n                    name: artist.name ?? UNDEFINED_PROPERTY,\n                    country: artist.country ?? UNDEFINED_PROPERTY,\n                };\n            });\n        }\n        return (resultsArray);\n        }\n    return (\n        <div>\n            <p>Test</p>\n        </div>\n    );    \n}\nexport default Test;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACf,MAAMC,WAAW,GAAG,aAAa;EACjC,MAAOA,WAAmB,IAAiC;IACvD,IAAIC,YAA+B,GAAG,EAAE;IACxC,MAAMC,kBAAkB,GAAG,SAAS;IACpC,MAAMC,UAAU,GAAI,oDAAmDH,WAAY,WAAU;IAC7F;;IAEII,QAAQ,CACR,YAA0B;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,UAAU,CAAC;QACxC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,WAAW,CAACF,IAAI,CAAC;QACjBG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACrB,CAAC,CACD,OAAMK,KAAK,EAAC;QACRC,KAAK,CAACD,KAAK,CAAC;MAChB;IACJ,CAAC,EAAE,GAAG,EAAE;MAACE,OAAO,EAAE,KAAK;MAAEC,QAAQ,EAAE;IAAI,CAAC,CAAC;IAEzC,MAAMN,WAAW,GAAIO,YAAsC,IAAW;MAClEf,YAAY,GAAGe,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;QAAA,IAAAC,UAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,eAAA;QAChD,OAAO;UACHC,EAAE,GAAAJ,UAAA,GAAED,MAAM,CAACK,EAAE,cAAAJ,UAAA,cAAAA,UAAA,GAAIlB,kBAAkB;UACnCuB,IAAI,GAAAJ,YAAA,GAAEF,MAAM,CAACM,IAAI,cAAAJ,YAAA,cAAAA,YAAA,GAAInB,kBAAkB;UACvCwB,IAAI,GAAAJ,YAAA,GAAEH,MAAM,CAACO,IAAI,cAAAJ,YAAA,cAAAA,YAAA,GAAIpB,kBAAkB;UACvCyB,OAAO,GAAAJ,eAAA,GAAEJ,MAAM,CAACQ,OAAO,cAAAJ,eAAA,cAAAA,eAAA,GAAIrB;QAC/B,CAAC;MACL,CAAC,CAAC;IACN,CAAC;IACD,OAAQD,YAAY;EACpB,CAAC;EACL,oBACIH,OAAA;IAAA8B,QAAA,eACI9B,OAAA;MAAA8B,QAAA,EAAG;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEd,CAAC;AAAAC,EAAA,GAtCKlC,IAAI;AAuCV,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}