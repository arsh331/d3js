{"ast":null,"code":"var _jsxFileName = \"/gsoc/git/d3js/src/Data.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Graph from \"./Graph\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nArray.prototype.scaleBetween = function (scaledMin, scaledMax, num) {\n  var max = Math.max.apply(Math, this);\n  var min = Math.min.apply(Math, this);\n  return (scaledMax - scaledMin) * (num - min) / (max - min) + scaledMin;\n};\nconst colorGenerator = () => {\n  var red = Math.floor(Math.random() * 256);\n  var green = Math.floor(Math.random() * 256);\n  var blue = Math.floor(Math.random() * 256);\n  /*var max = Math.max(Math.max(red, Math.max(green,blue)), 1);\n  var step = 255 / (max * 5);\n  var colors = [];\n   for(var i = 1; i <= numOfColors; i++){\n      var opacity = 1.0;\n      if(i === numOfColors)\n          opacity = 0.2;\n      colors.push(\"rgba(\" + Math.floor(red * i * step) + \",\" + Math.floor(green * i * step) + \",\" + Math.floor(blue * i * step) + \", \" + opacity +\")\");\n  }*/\n\n  var color = {\n    red: red,\n    green: green,\n    blue: blue,\n    mixed1: \"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\",\n    mixed2: \"rgba(\" + red + \",\" + green + \",\" + blue + \", 0.2)\"\n  };\n  return color;\n};\nconst computeColor = (color1, color2, weight) => {\n  var red = Math.floor((color2.red - color1.red) * weight + color1.red);\n  var green = Math.floor((color2.green - color1.green) * weight + color1.green);\n  var blue = Math.floor((color2.blue - color1.blue) * weight + color1.blue);\n  var color = {\n    red: red,\n    green: green,\n    blue: blue,\n    mixed1: \"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\",\n    mixed2: \"rgba(\" + red + \",\" + green + \",\" + blue + \", 0.2)\"\n  };\n  return color;\n};\nconst Data = () => {\n  _s();\n  const LIMIT_VALUE = 18;\n  const NUM_OF_COLORS = 5;\n  var artist_mbid = \"8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11\";\n  var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n  var color1 = colorGenerator();\n  var color2 = colorGenerator();\n  const [similarArtists, setSimilarArtists] = useState([]);\n  const [artist, setArtist] = useState(\"\");\n  const [limit, setLimit] = useState(LIMIT_VALUE);\n  const [colors, setColors] = useState([color1, color2]);\n  console.log(color1);\n  console.log(color2);\n  var transformedArtists = {};\n  var maxScore = 0;\n  const fetchData = artist_mbid => {\n    fetch(url + artist_mbid).then(response => response.json()).then(data => setData(data));\n  };\n  const setData = data => {\n    setArtist(data[1]);\n    setSimilarArtists(data[3]);\n    //setColors([colors[1], color2]);\n  };\n\n  const changeColor = color => {\n    setColors([color, color2]);\n  };\n  useEffect(() => {\n    fetchData(artist_mbid);\n    setColors([color1, color2]);\n  }, []);\n  var scoreList = [];\n  var artistList = similarArtists && similarArtists.data && similarArtists.data.map(artist => artist);\n  artistList = artistList && artistList.splice(0, limit);\n  var mainArtist = artist && artist.data && artist.data[0];\n  maxScore = artistList && artistList[LIMIT_VALUE - 1].score;\n  maxScore = Math.sqrt(maxScore);\n  if (mainArtist) mainArtist.score = 0;\n  artistList && artistList.push(mainArtist);\n  transformedArtists = artistList && {\n    \"nodes\": artistList.map((artist, index) => {\n      var computedScore = maxScore / Math.sqrt(artist.score);\n      scoreList.push(computedScore);\n      console.log(computedScore);\n      if (artist === mainArtist) {\n        computedScore = 1;\n        artistList.pop(mainArtist);\n        scoreList.pop();\n        index = 0;\n      }\n      return {\n        \"id\": artist.name,\n        \"artist_mbid\": artist.artist_mbid,\n        \"size\": artist.artist_mbid === mainArtist.artist_mbid ? 150 : 85,\n        //\"color\": artist.artist_mbid === mainArtist.artist_mbid ? colors[0] : index < limit/3 ? colors[1] : index < limit/3*2 ? colors[2] : colors[3],\n        \"color\": computeColor(colors[0], colors[1], index / LIMIT_VALUE * computedScore).mixed1,\n        \"seed\": artist.artist_mbid === mainArtist.artist_mbid ? 1 : 0,\n        \"score\": artist.score\n      };\n    }),\n    \"links\": artistList.map((artist, index) => {\n      return {\n        \"source\": mainArtist.name,\n        \"target\": artist.name,\n        \"distance\": artist.artist_mbid != mainArtist.artist_mbid ? /*scoreList.scaleBetween(300, 100, Math.sqrt(artist.score))*/scoreList[index] * 250 : 0,\n        \"strength\": artist.score < 5000 ? 2 : artist.score < 6000 ? 4 : 8\n      };\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      fetchData: fetchData,\n      setLimit: setLimit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      data: transformedArtists,\n      fetchData: fetchData,\n      backgroundColor: `linear-gradient(` + colors[1].mixed2 + `,` + colors[0].mixed2 + `)`,\n      changeColor: changeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s(Data, \"Hu+WjBk9dJ6Adl9SCQFnOO3U0dQ=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useState","useEffect","Graph","Input","jsxDEV","_jsxDEV","Array","prototype","scaleBetween","scaledMin","scaledMax","num","max","Math","apply","min","colorGenerator","red","floor","random","green","blue","color","mixed1","mixed2","computeColor","color1","color2","weight","Data","_s","LIMIT_VALUE","NUM_OF_COLORS","artist_mbid","url","similarArtists","setSimilarArtists","artist","setArtist","limit","setLimit","colors","setColors","console","log","transformedArtists","maxScore","fetchData","fetch","then","response","json","data","setData","changeColor","scoreList","artistList","map","splice","mainArtist","score","sqrt","push","index","computedScore","pop","name","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","_c","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/Data.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Graph from \"./Graph\";\nimport Input from \"./Input\";\n\nArray.prototype.scaleBetween = function(scaledMin, scaledMax, num) {\n    var max = Math.max.apply(Math, this);\n    var min = Math.min.apply(Math, this);\n    return ((scaledMax-scaledMin)*(num-min)/(max-min)+scaledMin);\n}\n\nconst colorGenerator = () => {\n\n    var red = Math.floor(Math.random() * 256);\n    var green = Math.floor(Math.random() * 256);\n    var blue  = Math.floor(Math.random() * 256);\n    /*var max = Math.max(Math.max(red, Math.max(green,blue)), 1);\n    var step = 255 / (max * 5);\n    var colors = [];\n\n    for(var i = 1; i <= numOfColors; i++){\n        var opacity = 1.0;\n        if(i === numOfColors)\n            opacity = 0.2;\n        colors.push(\"rgba(\" + Math.floor(red * i * step) + \",\" + Math.floor(green * i * step) + \",\" + Math.floor(blue * i * step) + \", \" + opacity +\")\");\n    }*/\n\n    var color = {\n        red: red,\n        green: green,\n        blue: blue,\n        mixed1: (\"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\"),\n        mixed2: (\"rgba(\" + red + \",\" + green + \",\" + blue + \", 0.2)\")\n    };\n    \n    return color;\n    \n}\n\nconst computeColor = (color1, color2, weight) => {\n    var red = Math.floor((color2.red - color1.red) * weight + color1.red);\n    var green = Math.floor((color2.green - color1.green) * weight + color1.green);\n    var blue = Math.floor((color2.blue - color1.blue) * weight + color1.blue);          \n\n    var color = {\n        red: red,\n        green: green,\n        blue: blue,\n        mixed1: (\"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\"),\n        mixed2: (\"rgba(\" + red + \",\" + green + \",\" + blue + \", 0.2)\")\n    };\n\n    return color;\n}\n\nconst Data = () => {\n    const LIMIT_VALUE = 18;\n    const NUM_OF_COLORS = 5;\n    var artist_mbid = \"8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11\";\n    var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n    var color1 = colorGenerator();\n    var color2 = colorGenerator();\n\n    const [similarArtists, setSimilarArtists] = useState([]);\n    const [artist, setArtist] = useState(\"\");\n    const [limit, setLimit] = useState(LIMIT_VALUE);\n    const [colors, setColors] = useState([color1, color2]);\n    \n    console.log(color1);\n    console.log(color2);\n    var transformedArtists = {};\n    var maxScore = 0;\n    \n    const fetchData = (artist_mbid) => {\n        fetch(url + artist_mbid)\n        .then((response) => response.json())\n        .then((data) => setData(data))   \n    }\n    \n    const setData = (data) => {\n        setArtist(data[1]);\n        setSimilarArtists(data[3]);\n        //setColors([colors[1], color2]);\n    }\n    const changeColor = (color) => {\n        setColors([color, color2]);\n    }\n\n    useEffect(() => {\n        fetchData(artist_mbid);\n        setColors([color1, color2]);\n    }, []);\n\n    var scoreList = [];  \n    var artistList = similarArtists && similarArtists.data && (similarArtists.data.map((artist) => artist));\n    artistList = artistList && artistList.splice(0, limit);\n    var mainArtist = artist && artist.data && artist.data[0];\n    \n    \n    maxScore = artistList && artistList[LIMIT_VALUE - 1].score;\n    maxScore = Math.sqrt(maxScore);\n\n    if(mainArtist) \n        mainArtist.score = 0;\n    artistList && artistList.push(mainArtist);\n\n    transformedArtists = artistList && {\n        \"nodes\": artistList.map((artist, index) => {\n            var computedScore = maxScore / Math.sqrt(artist.score);\n            scoreList.push(computedScore);\n            console.log(computedScore);\n\n            if(artist === mainArtist){\n                computedScore = 1;\n                artistList.pop(mainArtist);\n                scoreList.pop();\n                index = 0;\n            }\n            \n            return {\n                \"id\": artist.name,\n                \"artist_mbid\": artist.artist_mbid,\n                \"size\": artist.artist_mbid === mainArtist.artist_mbid ? 150 : 85,\n                //\"color\": artist.artist_mbid === mainArtist.artist_mbid ? colors[0] : index < limit/3 ? colors[1] : index < limit/3*2 ? colors[2] : colors[3],\n                \"color\": computeColor(colors[0], colors[1], (index /LIMIT_VALUE * computedScore)).mixed1,\n                \"seed\": artist.artist_mbid === mainArtist.artist_mbid ? 1 : 0,\n                \"score\": artist.score\n            };\n        }),\n        \"links\": artistList.map((artist, index) => {\n            return {\n                \"source\": mainArtist.name,\n                \"target\": artist.name,\n                \"distance\": (artist.artist_mbid != mainArtist.artist_mbid ? /*scoreList.scaleBetween(300, 100, Math.sqrt(artist.score))*/ scoreList[index] * 250 : 0),\n                \"strength\": artist.score < 5000 ? 2 : artist.score < 6000 ? 4 : 8,\n                };\n        }),\n    }\n    \n    return (\n        <div>\n            <Input fetchData={fetchData} setLimit={setLimit}/>\n            <Graph data={transformedArtists} fetchData={fetchData} backgroundColor={`linear-gradient(` + colors[1].mixed2 + `,` + colors[0].mixed2 + `)`} changeColor={changeColor}/>\n        </div>\n    );\n}\n\nexport default Data;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}