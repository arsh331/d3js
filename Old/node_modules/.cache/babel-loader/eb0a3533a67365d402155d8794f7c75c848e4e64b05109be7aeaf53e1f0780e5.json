{"ast":null,"code":"import { throttle } from \"lodash\";\n//import type { ArtistType } from \"./../Data\";\n\nconst ArtistLookup = async searchQuery => {\n  var resultsArray = [];\n  const UNDEFINED_PROPERTY = \"Unknown\";\n  const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n  var data;\n  // Fetches the artists from the MusicBrainz API\n  throttle(async () => {\n    try {\n      const response = await fetch(LOOKUP_URL);\n      data = await response.json();\n    } catch (error) {\n      alert(error);\n      data = {\n        created: \"\",\n        count: 0,\n        offset: 0,\n        artists: []\n      };\n    }\n  }, 800, {\n    leading: false,\n    trailing: true\n  });\n\n  /*const processData = (dataResponse: ArtistLookupResponseType): void => {   \n      resultsArray = dataResponse.artists.map((artist) => {\n          return {\n              id: artist.id ?? UNDEFINED_PROPERTY,\n              type: artist.type ?? UNDEFINED_PROPERTY,\n              name: artist.name ?? UNDEFINED_PROPERTY,\n              country: artist.country ?? UNDEFINED_PROPERTY,\n          };\n      });\n  }*/\n  return data;\n};\n_c = ArtistLookup;\nexport default ArtistLookup;\n\n// Fetches the artists from the MusicBrainz API\n/*const fetchArtists = useMemo(\n    () =>\n    throttle(\n    async(): Promise<void> => {\n    try {\n        const response = await fetch(LOOKUP_URL);\n        const data = await response.json();\n        setData(data);\n    }\n    catch(error){\n        alert(error);\n    }\n}, 800, {leading: false, trailing: true}), \n[setSearchResults, LOOKUP_URL]);\n\nconst setData = (dataResponse: ArtistLookupResponseType): void => {\n     setSearchResults(dataResponse.artists.map((artist) => {\n        return {\n            id: artist.id ?? UNDEFINED_PROPERTY,\n            type: artist.type ?? UNDEFINED_PROPERTY,\n            name: artist.name ?? UNDEFINED_PROPERTY,\n            country: artist.country ?? UNDEFINED_PROPERTY,\n        };\n    }));\n}\n*/\n/*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    var artist_mbid = form.artist_mbid.value;\n    var limit = form.limit.value;\n     props.onLimitChange(limit);\n    if(artist?.id !== undefined)\n        props.onArtistChange(artist.id);\n}*/\nvar _c;\n$RefreshReg$(_c, \"ArtistLookup\");","map":{"version":3,"names":["throttle","ArtistLookup","searchQuery","resultsArray","UNDEFINED_PROPERTY","LOOKUP_URL","data","response","fetch","json","error","alert","created","count","offset","artists","leading","trailing","_c","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/artist-search/ArtistLookup.ts"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { throttle } from \"lodash\";\n//import type { ArtistType } from \"./../Data\";\ntype ArtistType = {\n    name: string;\n    id: string;\n    type?: string;\n    country?: string;\n}\n\ntype ArtistLookupResponseType = {\n    created: string;\n    count: number;\n    offset: number;\n    artists: Array<ArtistType>;\n}\n\nconst ArtistLookup = async (searchQuery: string):  Promise<ArtistLookupResponseType>=> {\n    var resultsArray: Array<ArtistType> = [];\n    const UNDEFINED_PROPERTY = \"Unknown\";\n    const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n    var data;\n    // Fetches the artists from the MusicBrainz API\n    throttle(\n        async(): Promise<void> => {\n        try {\n            const response = await fetch(LOOKUP_URL);\n            data = await response.json();   \n        }\n        catch(error){\n            alert(error);\n            data = {\n                created: \"\",\n                count: 0,\n                offset: 0,\n                artists: []\n            };\n        }\n    }, 800, {leading: false, trailing: true});\n    \n    /*const processData = (dataResponse: ArtistLookupResponseType): void => {   \n        resultsArray = dataResponse.artists.map((artist) => {\n            return {\n                id: artist.id ?? UNDEFINED_PROPERTY,\n                type: artist.type ?? UNDEFINED_PROPERTY,\n                name: artist.name ?? UNDEFINED_PROPERTY,\n                country: artist.country ?? UNDEFINED_PROPERTY,\n            };\n        });\n    }*/\n    return data;\n}\nexport default ArtistLookup;\nexport type { ArtistType, ArtistLookupResponseType };\n\n    // Fetches the artists from the MusicBrainz API\n    /*const fetchArtists = useMemo(\n        () =>\n        throttle(\n        async(): Promise<void> => {\n        try {\n            const response = await fetch(LOOKUP_URL);\n            const data = await response.json();\n            setData(data);\n        }\n        catch(error){\n            alert(error);\n        }\n    }, 800, {leading: false, trailing: true}), \n    [setSearchResults, LOOKUP_URL]);\n    \n    const setData = (dataResponse: ArtistLookupResponseType): void => {\n         setSearchResults(dataResponse.artists.map((artist) => {\n            return {\n                id: artist.id ?? UNDEFINED_PROPERTY,\n                type: artist.type ?? UNDEFINED_PROPERTY,\n                name: artist.name ?? UNDEFINED_PROPERTY,\n                country: artist.country ?? UNDEFINED_PROPERTY,\n            };\n        }));\n    }\n    */\n    /*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        var artist_mbid = form.artist_mbid.value;\n        var limit = form.limit.value;\n\n        props.onLimitChange(limit);\n        if(artist?.id !== undefined)\n            props.onArtistChange(artist.id);\n    }*/"],"mappings":"AACA,SAASA,QAAQ,QAAQ,QAAQ;AACjC;;AAeA,MAAMC,YAAY,GAAG,MAAOC,WAAmB,IAAwC;EACnF,IAAIC,YAA+B,GAAG,EAAE;EACxC,MAAMC,kBAAkB,GAAG,SAAS;EACpC,MAAMC,UAAU,GAAI,oDAAmDH,WAAY,WAAU;EAC7F,IAAII,IAAI;EACR;EACAN,QAAQ,CACJ,YAA0B;IAC1B,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACH,UAAU,CAAC;MACxCC,IAAI,GAAG,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;IAChC,CAAC,CACD,OAAMC,KAAK,EAAC;MACRC,KAAK,CAACD,KAAK,CAAC;MACZJ,IAAI,GAAG;QACHM,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE;MACb,CAAC;IACL;EACJ,CAAC,EAAE,GAAG,EAAE;IAACC,OAAO,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAI,CAAC,CAAC;;EAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOX,IAAI;AACf,CAAC;AAAAY,EAAA,GAlCKjB,YAAY;AAmClB,eAAeA,YAAY;;AAGvB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARI,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}