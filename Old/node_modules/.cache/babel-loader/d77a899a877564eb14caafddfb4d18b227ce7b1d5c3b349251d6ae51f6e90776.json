{"ast":null,"code":"import { throttle } from \"lodash\";\n//import type { ArtistType } from \"./../Data\";\n\nexport default class ArtistLookup {}\nArtistLookup.search = searchQuery => {\n  var resultsArray = [];\n  const UNDEFINED_PROPERTY = \"Unknown\";\n  const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n  // Fetches the artists from the MusicBrainz API\n\n  throttle(async () => {\n    try {\n      const response = await fetch(LOOKUP_URL);\n      const data = await response.json();\n      processData(data);\n      console.log(data);\n    } catch (error) {\n      alert(error);\n    }\n  }, 800, {\n    leading: false,\n    trailing: true\n  });\n  const processData = dataResponse => {\n    resultsArray = dataResponse.artists.map(artist => {\n      var _artist$id, _artist$type, _artist$name, _artist$country;\n      return {\n        id: (_artist$id = artist.id) !== null && _artist$id !== void 0 ? _artist$id : UNDEFINED_PROPERTY,\n        type: (_artist$type = artist.type) !== null && _artist$type !== void 0 ? _artist$type : UNDEFINED_PROPERTY,\n        name: (_artist$name = artist.name) !== null && _artist$name !== void 0 ? _artist$name : UNDEFINED_PROPERTY,\n        country: (_artist$country = artist.country) !== null && _artist$country !== void 0 ? _artist$country : UNDEFINED_PROPERTY\n      };\n    });\n  };\n  return resultsArray;\n}; // Fetches the artists from the MusicBrainz API\n/*const fetchArtists = useMemo(\n    () =>\n    throttle(\n    async(): Promise<void> => {\n    try {\n        const response = await fetch(LOOKUP_URL);\n        const data = await response.json();\n        setData(data);\n    }\n    catch(error){\n        alert(error);\n    }\n}, 800, {leading: false, trailing: true}), \n[setSearchResults, LOOKUP_URL]);\n\nconst setData = (dataResponse: ArtistLookupResponseType): void => {\n     setSearchResults(dataResponse.artists.map((artist) => {\n        return {\n            id: artist.id ?? UNDEFINED_PROPERTY,\n            type: artist.type ?? UNDEFINED_PROPERTY,\n            name: artist.name ?? UNDEFINED_PROPERTY,\n            country: artist.country ?? UNDEFINED_PROPERTY,\n        };\n    }));\n}\n*/\n/*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    var artist_mbid = form.artist_mbid.value;\n    var limit = form.limit.value;\n     props.onLimitChange(limit);\n    if(artist?.id !== undefined)\n        props.onArtistChange(artist.id);\n}*/","map":{"version":3,"names":["throttle","ArtistLookup","search","searchQuery","resultsArray","UNDEFINED_PROPERTY","LOOKUP_URL","response","fetch","data","json","processData","console","log","error","alert","leading","trailing","dataResponse","artists","map","artist","_artist$id","_artist$type","_artist$name","_artist$country","id","type","name","country"],"sources":["/gsoc/git/d3js/src/artist-search/ArtistLookup.ts"],"sourcesContent":["import React, { useMemo } from \"react\";\nimport { throttle } from \"lodash\";\n//import type { ArtistType } from \"./../Data\";\ntype ArtistType = {\n    name: string;\n    id: string;\n    type?: string;\n    country?: string;\n}\n\ntype ArtistLookupResponseType = {\n    created: string;\n    count: number;\n    offset: number;\n    artists: Array<ArtistType>;\n}\n\nexport default class ArtistLookup {\n    \n    static search = (searchQuery: string): Array<ArtistType> => {\n    var resultsArray: Array<ArtistType> = [];\n    const UNDEFINED_PROPERTY = \"Unknown\";\n    const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n    // Fetches the artists from the MusicBrainz API\n\n        throttle(\n        async(): Promise<void> => {\n        try {\n            const response = await fetch(LOOKUP_URL);\n            const data = await response.json();\n            processData(data);\n            console.log(data);   \n        }\n        catch(error){\n            alert(error);\n        }\n    }, 800, {leading: false, trailing: true});\n    \n    const processData = (dataResponse: ArtistLookupResponseType): void => {   \n        resultsArray = dataResponse.artists.map((artist) => {\n            return {\n                id: artist.id ?? UNDEFINED_PROPERTY,\n                type: artist.type ?? UNDEFINED_PROPERTY,\n                name: artist.name ?? UNDEFINED_PROPERTY,\n                country: artist.country ?? UNDEFINED_PROPERTY,\n            };\n        });\n    }\n    return (resultsArray);\n    }\n}\nexport type { ArtistType };\n\n    // Fetches the artists from the MusicBrainz API\n    /*const fetchArtists = useMemo(\n        () =>\n        throttle(\n        async(): Promise<void> => {\n        try {\n            const response = await fetch(LOOKUP_URL);\n            const data = await response.json();\n            setData(data);\n        }\n        catch(error){\n            alert(error);\n        }\n    }, 800, {leading: false, trailing: true}), \n    [setSearchResults, LOOKUP_URL]);\n    \n    const setData = (dataResponse: ArtistLookupResponseType): void => {\n         setSearchResults(dataResponse.artists.map((artist) => {\n            return {\n                id: artist.id ?? UNDEFINED_PROPERTY,\n                type: artist.type ?? UNDEFINED_PROPERTY,\n                name: artist.name ?? UNDEFINED_PROPERTY,\n                country: artist.country ?? UNDEFINED_PROPERTY,\n            };\n        }));\n    }\n    */\n    /*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        var artist_mbid = form.artist_mbid.value;\n        var limit = form.limit.value;\n\n        props.onLimitChange(limit);\n        if(artist?.id !== undefined)\n            props.onArtistChange(artist.id);\n    }*/"],"mappings":"AACA,SAASA,QAAQ,QAAQ,QAAQ;AACjC;;AAeA,eAAe,MAAMC,YAAY,CAAC;AAAbA,YAAY,CAEtBC,MAAM,GAAIC,WAAmB,IAAwB;EAC5D,IAAIC,YAA+B,GAAG,EAAE;EACxC,MAAMC,kBAAkB,GAAG,SAAS;EACpC,MAAMC,UAAU,GAAI,oDAAmDH,WAAY,WAAU;EAC7F;;EAEIH,QAAQ,CACR,YAA0B;IAC1B,IAAI;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACF,UAAU,CAAC;MACxC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCC,WAAW,CAACF,IAAI,CAAC;MACjBG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACrB,CAAC,CACD,OAAMK,KAAK,EAAC;MACRC,KAAK,CAACD,KAAK,CAAC;IAChB;EACJ,CAAC,EAAE,GAAG,EAAE;IAACE,OAAO,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAI,CAAC,CAAC;EAEzC,MAAMN,WAAW,GAAIO,YAAsC,IAAW;IAClEd,YAAY,GAAGc,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;MAAA,IAAAC,UAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,eAAA;MAChD,OAAO;QACHC,EAAE,GAAAJ,UAAA,GAAED,MAAM,CAACK,EAAE,cAAAJ,UAAA,cAAAA,UAAA,GAAIjB,kBAAkB;QACnCsB,IAAI,GAAAJ,YAAA,GAAEF,MAAM,CAACM,IAAI,cAAAJ,YAAA,cAAAA,YAAA,GAAIlB,kBAAkB;QACvCuB,IAAI,GAAAJ,YAAA,GAAEH,MAAM,CAACO,IAAI,cAAAJ,YAAA,cAAAA,YAAA,GAAInB,kBAAkB;QACvCwB,OAAO,GAAAJ,eAAA,GAAEJ,MAAM,CAACQ,OAAO,cAAAJ,eAAA,cAAAA,eAAA,GAAIpB;MAC/B,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EACD,OAAQD,YAAY;AACpB,CAAC,EAID;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}