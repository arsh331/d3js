{"ast":null,"code":"import { throttle } from \"lodash\";\nconst ArtistLookup = throttle(_c = async searchQuery => {\n  var resultsArray = [];\n  const UNDEFINED_PROPERTY = \"Unknown\";\n  const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n  var data;\n  // Fetches the artists from the MusicBrainz API\n  try {\n    const response = await fetch(LOOKUP_URL);\n    data = await response.json();\n    //processData(data);\n  } catch (error) {\n    alert(error);\n    // Do we need to return something here?\n    data = {\n      created: \"\",\n      count: 0,\n      offset: 0,\n      artists: []\n    };\n  }\n  return data.artists;\n}, 500);\n_c2 = ArtistLookup;\nexport default ArtistLookup;\n\n// Fetches the artists from the MusicBrainz API\n/*const fetchArtists = useMemo(\n    () =>\n    throttle(\n    async(): Promise<void> => {\n    try {\n        const response = await fetch(LOOKUP_URL);\n        const data = await response.json();\n        setData(data);\n    }\n    catch(error){\n        alert(error);\n    }\n}, 800, {leading: false, trailing: true}), \n[setSearchResults, LOOKUP_URL]);\n\nconst setData = (dataResponse: ArtistLookupResponseType): void => {\n     setSearchResults(dataResponse.artists.map((artist) => {\n        return {\n            id: artist.id ?? UNDEFINED_PROPERTY,\n            type: artist.type ?? UNDEFINED_PROPERTY,\n            name: artist.name ?? UNDEFINED_PROPERTY,\n            country: artist.country ?? UNDEFINED_PROPERTY,\n        };\n    }));\n}\n*/\n/*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    var artist_mbid = form.artist_mbid.value;\n    var limit = form.limit.value;\n     props.onLimitChange(limit);\n    if(artist?.id !== undefined)\n        props.onArtistChange(artist.id);\n}*/\nvar _c, _c2;\n$RefreshReg$(_c, \"ArtistLookup$throttle\");\n$RefreshReg$(_c2, \"ArtistLookup\");","map":{"version":3,"names":["throttle","ArtistLookup","_c","searchQuery","resultsArray","UNDEFINED_PROPERTY","LOOKUP_URL","data","response","fetch","json","error","alert","created","count","offset","artists","_c2","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/artist-search/ArtistLookup.ts"],"sourcesContent":["import { throttle } from \"lodash\";\ntype ArtistType = {\n    name: string;\n    id: string;\n    type?: string;\n    country?: string;\n}\n\ntype ArtistLookupResponseType = {\n    created: string;\n    count: number;\n    offset: number;\n    artists: Array<ArtistType>;\n}\n\nconst ArtistLookup = throttle(async (searchQuery: string):  Promise<Array<ArtistType>>=> {\n    var resultsArray: Array<ArtistType> = [];\n    const UNDEFINED_PROPERTY = \"Unknown\";\n    const LOOKUP_URL = `http://musicbrainz.org/ws/2/artist/?query=artist:${searchQuery}&fmt=json`;\n    var data: ArtistLookupResponseType;\n    // Fetches the artists from the MusicBrainz API\n    try {\n        const response = await fetch(LOOKUP_URL);\n        data = await response.json();   \n        //processData(data);\n    }\n    catch(error){\n        alert(error);\n        // Do we need to return something here?\n        data = {\n            created: \"\",\n            count: 0,\n            offset: 0,\n            artists: []\n        };\n    }\n    return data.artists;\n}, 500);\n\nexport default ArtistLookup;\nexport type { ArtistType, ArtistLookupResponseType };\n\n    // Fetches the artists from the MusicBrainz API\n    /*const fetchArtists = useMemo(\n        () =>\n        throttle(\n        async(): Promise<void> => {\n        try {\n            const response = await fetch(LOOKUP_URL);\n            const data = await response.json();\n            setData(data);\n        }\n        catch(error){\n            alert(error);\n        }\n    }, 800, {leading: false, trailing: true}), \n    [setSearchResults, LOOKUP_URL]);\n    \n    const setData = (dataResponse: ArtistLookupResponseType): void => {\n         setSearchResults(dataResponse.artists.map((artist) => {\n            return {\n                id: artist.id ?? UNDEFINED_PROPERTY,\n                type: artist.type ?? UNDEFINED_PROPERTY,\n                name: artist.name ?? UNDEFINED_PROPERTY,\n                country: artist.country ?? UNDEFINED_PROPERTY,\n            };\n        }));\n    }\n    */\n    /*const handleInput = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        var artist_mbid = form.artist_mbid.value;\n        var limit = form.limit.value;\n\n        props.onLimitChange(limit);\n        if(artist?.id !== undefined)\n            props.onArtistChange(artist.id);\n    }*/"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,QAAQ;AAejC,MAAMC,YAAY,GAAGD,QAAQ,CAAAE,EAAA,GAAC,MAAOC,WAAmB,IAAiC;EACrF,IAAIC,YAA+B,GAAG,EAAE;EACxC,MAAMC,kBAAkB,GAAG,SAAS;EACpC,MAAMC,UAAU,GAAI,oDAAmDH,WAAY,WAAU;EAC7F,IAAII,IAA8B;EAClC;EACA,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,UAAU,CAAC;IACxCC,IAAI,GAAG,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC5B;EACJ,CAAC,CACD,OAAMC,KAAK,EAAC;IACRC,KAAK,CAACD,KAAK,CAAC;IACZ;IACAJ,IAAI,GAAG;MACHM,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC;MACTC,OAAO,EAAE;IACb,CAAC;EACL;EACA,OAAOT,IAAI,CAACS,OAAO;AACvB,CAAC,EAAE,GAAG,CAAC;AAACC,GAAA,GAtBFhB,YAAY;AAwBlB,eAAeA,YAAY;;AAGvB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARI,IAAAC,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}