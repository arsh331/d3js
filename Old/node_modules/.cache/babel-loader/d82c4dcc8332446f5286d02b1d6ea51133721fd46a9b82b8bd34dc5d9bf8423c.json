{"ast":null,"code":"var _jsxFileName = \"/gsoc/git/d3js/src/Data.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Graph from \"./Graph\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nArray.prototype.scaleBetween = function (scaledMin, scaledMax, num) {\n  var max = Math.max.apply(Math, this);\n  var min = Math.min.apply(Math, this);\n  return (scaledMax - scaledMin) * (num - min) / (max - min) + scaledMin;\n};\nconst colorGenerator = () => {\n  var red = Math.floor(Math.random() * 256);\n  var green = Math.floor(Math.random() * 256);\n  var blue = Math.floor(Math.random() * 256);\n  /*var max = Math.max(Math.max(red, Math.max(green,blue)), 1);\n  var step = 255 / (max * 5);\n  var colors = [];\n   for(var i = 1; i <= numOfColors; i++){\n      var opacity = 1.0;\n      if(i === numOfColors)\n          opacity = 0.2;\n      colors.push(\"rgba(\" + Math.floor(red * i * step) + \",\" + Math.floor(green * i * step) + \",\" + Math.floor(blue * i * step) + \", \" + opacity +\")\");\n  }*/\n\n  var color = {\n    red: red,\n    green: green,\n    blue: blue,\n    mixed: \"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\"\n  };\n  return color;\n};\nconst computeColor = (color1, color2, weight, opacity) => {\n  var red = (color2.red - color1.red) * weight + color1.red;\n  var green = (color2.green - color1.green) * weight + color1.green;\n  var blue = (color2.blue - color1.blue) * weight + color1.blue;\n  return \"rgba(\" + red + \",\" + green + \",\" + blue + \", \" + opacity + \" )\";\n};\nconst Data = () => {\n  _s();\n  const LIMIT_VALUE = 18;\n  const NUM_OF_COLORS = 5;\n  var artist_mbid = \"8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11\";\n  var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n  const [similarArtists, setSimilarArtists] = useState([]);\n  const [artist, setArtist] = useState(\"\");\n  const [limit, setLimit] = useState(LIMIT_VALUE);\n  //const [colors, setColors] = useState([]);\n  var transformedArtists = {};\n  var maxScore = 0;\n  const fetchData = artist_mbid => {\n    fetch(url + artist_mbid).then(response => response.json()).then(data => setData(data));\n  };\n  const setData = data => {\n    setArtist(data[1]);\n    setSimilarArtists(data[3]);\n  };\n  useEffect(() => {\n    fetchData(artist_mbid);\n    //setColors(colorGenerator(NUM_OF_COLORS));\n  }, []);\n  var scoreList = [];\n  var artistList = similarArtists && similarArtists.data && similarArtists.data.map(artist => artist);\n  artistList = artistList && artistList.splice(0, limit);\n  var mainArtist = artist && artist.data && artist.data[0];\n  artistList && artistList.push(mainArtist);\n  maxScore = artistList && artistList[0].score;\n  maxScore = Math.sqrt(maxScore);\n  console.log(maxScore);\n  transformedArtists = artistList && {\n    \"nodes\": artistList.map((artist, index) => {\n      var computedScore = 1.0 - Math.sqrt(artist.score) / maxScore;\n      scoreList.push(computedScore);\n      return {\n        \"id\": artist.name,\n        \"artist_mbid\": artist.artist_mbid,\n        \"size\": artist.artist_mbid === mainArtist.artist_mbid ? 150 : 85,\n        //\"color\": artist.artist_mbid === mainArtist.artist_mbid ? colors[0] : index < limit/3 ? colors[1] : index < limit/3*2 ? colors[2] : colors[3],\n        \"color\": computeColor(colorGenerator(), colorGenerator(), computedScore, 1.0),\n        \"seed\": artist.artist_mbid === mainArtist.artist_mbid ? 1 : 0,\n        \"score\": artist.score\n      };\n    }),\n    \"links\": artistList.map((artist, index) => {\n      return {\n        \"source\": mainArtist.name,\n        \"target\": artist.name,\n        \"distance\": artist.artist_mbid != mainArtist.artist_mbid ? /*scoreList.scaleBetween(300, 100, Math.sqrt(artist.score))*/scoreList[index] * 500 : 0,\n        \"strength\": artist.score < 5000 ? 2 : artist.score < 6000 ? 4 : 8\n      };\n    })\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      fetchData: fetchData,\n      setLimit: setLimit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Graph, {\n      data: transformedArtists,\n      fetchData: fetchData,\n      backgroundColor: colors[4]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(Data, \"rS4tKU6+urwfRRzkk/W6KU1MsKg=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["React","useState","useEffect","Graph","Input","jsxDEV","_jsxDEV","Array","prototype","scaleBetween","scaledMin","scaledMax","num","max","Math","apply","min","colorGenerator","red","floor","random","green","blue","color","mixed","computeColor","color1","color2","weight","opacity","Data","_s","LIMIT_VALUE","NUM_OF_COLORS","artist_mbid","url","similarArtists","setSimilarArtists","artist","setArtist","limit","setLimit","transformedArtists","maxScore","fetchData","fetch","then","response","json","data","setData","scoreList","artistList","map","splice","mainArtist","push","score","sqrt","console","log","index","computedScore","name","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","colors","_c","$RefreshReg$"],"sources":["/gsoc/git/d3js/src/Data.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Graph from \"./Graph\";\nimport Input from \"./Input\";\n\nArray.prototype.scaleBetween = function(scaledMin, scaledMax, num) {\n    var max = Math.max.apply(Math, this);\n    var min = Math.min.apply(Math, this);\n    return ((scaledMax-scaledMin)*(num-min)/(max-min)+scaledMin);\n}\n\nconst colorGenerator = () => {\n\n    var red = Math.floor(Math.random() * 256);\n    var green = Math.floor(Math.random() * 256);\n    var blue  = Math.floor(Math.random() * 256);\n    /*var max = Math.max(Math.max(red, Math.max(green,blue)), 1);\n    var step = 255 / (max * 5);\n    var colors = [];\n\n    for(var i = 1; i <= numOfColors; i++){\n        var opacity = 1.0;\n        if(i === numOfColors)\n            opacity = 0.2;\n        colors.push(\"rgba(\" + Math.floor(red * i * step) + \",\" + Math.floor(green * i * step) + \",\" + Math.floor(blue * i * step) + \", \" + opacity +\")\");\n    }*/\n\n    var color = {\n        red: red,\n        green: green,\n        blue: blue,\n        mixed: (\"rgba(\" + red + \",\" + green + \",\" + blue + \", 1.0)\")\n    };\n    \n    return color;\n    \n}\n\nconst computeColor = (color1, color2, weight, opacity) => {\n    var red = (color2.red - color1.red) * weight + color1.red;\n    var green = (color2.green - color1.green) * weight + color1.green;\n    var blue = (color2.blue - color1.blue) * weight + color1.blue;          \n\n    return (\"rgba(\" + red + \",\" + green + \",\" + blue + \", \" + opacity +\" )\");\n}\n\nconst Data = () => {\n    const LIMIT_VALUE = 18;\n    const NUM_OF_COLORS = 5;\n    var artist_mbid = \"8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11\";\n    var url = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n    const [similarArtists, setSimilarArtists] = useState([]);\n    const [artist, setArtist] = useState(\"\");\n    const [limit, setLimit] = useState(LIMIT_VALUE);\n    //const [colors, setColors] = useState([]);\n    var transformedArtists = {};\n    var maxScore = 0;\n    \n    const fetchData = (artist_mbid) => {\n        fetch(url + artist_mbid)\n        .then((response) => response.json())\n        .then((data) => setData(data))   \n    }\n    \n    const setData = (data) => {\n        setArtist(data[1]);\n        setSimilarArtists(data[3]);\n    }\n    \n    useEffect(() => {\n        fetchData(artist_mbid);\n        //setColors(colorGenerator(NUM_OF_COLORS));\n    }, []);\n\n    var scoreList = [];  \n    var artistList = similarArtists && similarArtists.data && (similarArtists.data.map((artist) => artist));\n    artistList = artistList && artistList.splice(0, limit);\n    var mainArtist = artist && artist.data && artist.data[0];\n    artistList && artistList.push(mainArtist);\n    \n    maxScore = artistList && artistList[0].score;\n    maxScore = Math.sqrt(maxScore);\n\n    console.log(maxScore);\n    transformedArtists = artistList && {\n        \"nodes\": artistList.map((artist, index) => {\n            var computedScore = 1.0 - (Math.sqrt(artist.score) / maxScore);\n            scoreList.push(computedScore);\n\n            return {\n                \"id\": artist.name,\n                \"artist_mbid\": artist.artist_mbid,\n                \"size\": artist.artist_mbid === mainArtist.artist_mbid ? 150 : 85,\n                //\"color\": artist.artist_mbid === mainArtist.artist_mbid ? colors[0] : index < limit/3 ? colors[1] : index < limit/3*2 ? colors[2] : colors[3],\n                \"color\": computeColor(colorGenerator(), colorGenerator(), computedScore, 1.0),\n                \"seed\": artist.artist_mbid === mainArtist.artist_mbid ? 1 : 0,\n                \"score\": artist.score\n            };\n        }),\n        \"links\": artistList.map((artist, index) => {\n            return {\n                \"source\": mainArtist.name,\n                \"target\": artist.name,\n                \"distance\": (artist.artist_mbid != mainArtist.artist_mbid ? /*scoreList.scaleBetween(300, 100, Math.sqrt(artist.score))*/ scoreList[index] * 500 : 0),\n                \"strength\": artist.score < 5000 ? 2 : artist.score < 6000 ? 4 : 8,\n                };\n        }),\n    }\n    \n    return (\n        <div>\n            <Input fetchData={fetchData} setLimit={setLimit}/>\n            <Graph data={transformedArtists} fetchData={fetchData} backgroundColor={colors[4]}/>\n        </div>\n    );\n}\n\nexport default Data;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}