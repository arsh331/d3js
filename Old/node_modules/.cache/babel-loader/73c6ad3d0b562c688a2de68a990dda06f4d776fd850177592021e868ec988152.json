{"ast":null,"code":"import { memo as e, useState as n, useEffect as i, useMemo as o, useCallback as t, createElement as r, Fragment as d, forwardRef as a, useRef as c } from \"react\";\nimport { useTheme as l, useMotionConfig as s, Container as u, useDimensions as v, SvgWrapper as f, ResponsiveWrapper as h, getRelativeCursor as k, getDistance as p } from \"@nivo/core\";\nimport { animated as m, to as g, useTransition as y } from \"@react-spring/web\";\nimport { jsx as C, Fragment as M } from \"react/jsx-runtime\";\nimport { BasicTooltip as x, useTooltip as z } from \"@nivo/tooltip\";\nimport { forceSimulation as b, forceLink as I, forceManyBody as S, forceCenter as N } from \"d3-force\";\nimport { useInheritedColor as W } from \"@nivo/colors\";\nimport { useAnnotations as B, Annotation as T, useComputedAnnotations as w, renderAnnotationsToCanvas as A } from \"@nivo/annotations\";\nfunction L() {\n  return L = Object.assign ? Object.assign.bind() : function (e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var i = arguments[n];\n      for (var o in i) Object.prototype.hasOwnProperty.call(i, o) && (e[o] = i[o]);\n    }\n    return e;\n  }, L.apply(this, arguments);\n}\nfunction D(e, n) {\n  if (null == e) return {};\n  var i,\n    o,\n    t = {},\n    r = Object.keys(e);\n  for (o = 0; o < r.length; o++) i = r[o], n.indexOf(i) >= 0 || (t[i] = e[i]);\n  return t;\n}\nvar E = e(function (e) {\n    var n = e.node,\n      i = e.animated,\n      o = e.onClick,\n      t = e.onMouseEnter,\n      r = e.onMouseMove,\n      d = e.onMouseLeave;\n    return C(m.circle, {\n      \"data-testid\": \"node.\" + n.id,\n      transform: g([i.x, i.y, i.scale], function (e, n, i) {\n        return \"translate(\" + e + \",\" + n + \") scale(\" + i + \")\";\n      }),\n      r: g([i.size], function (e) {\n        return e / 2;\n      }),\n      fill: i.color,\n      strokeWidth: i.borderWidth,\n      stroke: i.borderColor,\n      opacity: i.opacity,\n      onClick: o ? function (e) {\n        return o(n, e);\n      } : void 0,\n      onMouseEnter: t ? function (e) {\n        return t(n, e);\n      } : void 0,\n      onMouseMove: r ? function (e) {\n        return r(n, e);\n      } : void 0,\n      onMouseLeave: d ? function (e) {\n        return d(n, e);\n      } : void 0\n    });\n  }),\n  R = e(function (e) {\n    var n = e.link,\n      i = e.animated,\n      o = e.blendMode;\n    return C(m.line, {\n      \"data-testid\": \"link.\" + n.id,\n      stroke: i.color,\n      style: {\n        mixBlendMode: o\n      },\n      strokeWidth: n.thickness,\n      strokeLinecap: \"round\",\n      opacity: i.opacity,\n      x1: i.x1,\n      y1: i.y1,\n      x2: i.x2,\n      y2: i.y2\n    });\n  }),\n  O = {\n    layers: [\"links\", \"nodes\", \"annotations\"],\n    linkDistance: 30,\n    centeringStrength: 1,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: 1 / 0,\n    iterations: 120,\n    nodeSize: 12,\n    activeNodeSize: 18,\n    inactiveNodeSize: 8,\n    nodeColor: \"#000000\",\n    nodeBorderWidth: 0,\n    nodeBorderColor: {\n      from: \"color\"\n    },\n    linkThickness: 1,\n    linkColor: {\n      from: \"source.color\"\n    },\n    isInteractive: !0,\n    defaultActiveNodeIds: [],\n    nodeTooltip: function (e) {\n      var n = e.node;\n      return C(x, {\n        id: n.id,\n        enableChip: !0,\n        color: n.color\n      });\n    },\n    annotations: [],\n    animate: !0,\n    motionConfig: \"gentle\",\n    role: \"img\"\n  },\n  P = L({}, O, {\n    nodeComponent: E,\n    linkComponent: R,\n    linkBlendMode: \"normal\"\n  }),\n  j = L({}, O, {\n    renderNode: function (e, n) {\n      e.fillStyle = n.color, e.beginPath(), e.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), e.fill(), n.borderWidth > 0 && (e.strokeStyle = n.borderColor, e.lineWidth = n.borderWidth, e.stroke());\n    },\n    renderLink: function (e, n) {\n      e.strokeStyle = n.color, e.lineWidth = n.thickness, e.beginPath(), e.moveTo(n.source.x, n.source.y), e.lineTo(n.target.x, n.target.y), e.stroke();\n    },\n    pixelRatio: \"undefined\" != typeof window && window.devicePixelRatio || 1\n  }),\n  H = [\"index\"],\n  F = function (e) {\n    return o(function () {\n      return \"function\" == typeof e ? e : function () {\n        return e;\n      };\n    }, [e]);\n  },\n  q = function (e) {\n    var r = e.center,\n      d = e.nodes,\n      a = e.links,\n      c = e.linkDistance,\n      s = void 0 === c ? O.linkDistance : c,\n      u = e.centeringStrength,\n      v = void 0 === u ? O.centeringStrength : u,\n      f = e.repulsivity,\n      h = void 0 === f ? O.repulsivity : f,\n      k = e.distanceMin,\n      p = void 0 === k ? O.distanceMin : k,\n      m = e.distanceMax,\n      g = void 0 === m ? O.distanceMax : m,\n      y = e.iterations,\n      C = void 0 === y ? O.iterations : y,\n      M = e.nodeSize,\n      x = void 0 === M ? O.nodeSize : M,\n      z = e.activeNodeSize,\n      B = void 0 === z ? O.activeNodeSize : z,\n      T = e.inactiveNodeSize,\n      w = void 0 === T ? O.inactiveNodeSize : T,\n      A = e.nodeColor,\n      E = void 0 === A ? O.nodeColor : A,\n      R = e.nodeBorderWidth,\n      P = void 0 === R ? O.nodeBorderWidth : R,\n      j = e.nodeBorderColor,\n      q = void 0 === j ? O.nodeBorderColor : j,\n      G = e.linkThickness,\n      J = void 0 === G ? O.linkThickness : G,\n      K = e.linkColor,\n      Q = void 0 === K ? O.linkColor : K,\n      U = e.isInteractive,\n      V = void 0 === U ? O.isInteractive : U,\n      X = e.defaultActiveNodeIds,\n      Y = void 0 === X ? O.defaultActiveNodeIds : X,\n      Z = n(null),\n      $ = Z[0],\n      _ = Z[1],\n      ee = n(null),\n      ne = ee[0],\n      ie = ee[1],\n      oe = function (e) {\n        var n = e.linkDistance,\n          i = e.centeringStrength,\n          t = e.repulsivity,\n          r = e.distanceMin,\n          d = e.distanceMax,\n          a = e.center,\n          c = F(n),\n          l = a[0],\n          s = a[1];\n        return o(function () {\n          return {\n            link: I().distance(function (e) {\n              return c(e.data);\n            }).strength(i),\n            charge: S().strength(-t).distanceMin(r).distanceMax(d),\n            center: N(l, s)\n          };\n        }, [c, i, t, r, d, l, s]);\n      }({\n        linkDistance: s,\n        centeringStrength: v,\n        repulsivity: h,\n        distanceMin: p,\n        distanceMax: g,\n        center: r\n      });\n    i(function () {\n      var e = d.map(function (e) {\n          return {\n            id: e.id,\n            data: L({}, e),\n            index: 0,\n            x: 0,\n            y: 0,\n            vx: 0,\n            vy: 0\n          };\n        }),\n        n = a.map(function (n) {\n          return {\n            data: L({}, n),\n            index: 0,\n            source: e.find(function (e) {\n              return e.id === n.source;\n            }),\n            target: e.find(function (e) {\n              return e.id === n.target;\n            })\n          };\n        }),\n        i = b(e).force(\"link\", oe.link.links(n)).force(\"charge\", oe.charge).force(\"center\", oe.center).stop();\n      return i.tick(C), _(e), ie(n), function () {\n        i.stop();\n      };\n    }, [d, a, oe, C, _, ie]);\n    var te = n(Y),\n      re = te[0],\n      de = te[1],\n      ae = function (e) {\n        var n = e.size,\n          i = e.activeSize,\n          o = e.inactiveSize,\n          r = e.color,\n          d = e.borderWidth,\n          a = e.borderColor,\n          c = e.isInteractive,\n          s = e.activeNodeIds,\n          u = l(),\n          v = F(n),\n          f = F(r),\n          h = F(d),\n          k = W(a, u),\n          p = t(function (e) {\n            var n = f(e.data);\n            return {\n              size: v(e.data),\n              color: n,\n              borderWidth: h(e.data),\n              borderColor: k(L({}, e, {\n                color: n\n              }))\n            };\n          }, [v, f, h, k]),\n          m = F(i),\n          g = t(function (e) {\n            var n = f(e.data);\n            return {\n              size: m(e.data),\n              color: n,\n              borderWidth: h(e.data),\n              borderColor: k(L({}, e, {\n                color: n\n              }))\n            };\n          }, [m, f, h, k]),\n          y = F(o),\n          C = t(function (e) {\n            var n = f(e.data);\n            return {\n              size: y(e.data),\n              color: n,\n              borderWidth: h(e.data),\n              borderColor: k(L({}, e, {\n                color: n\n              }))\n            };\n          }, [y, f, h, k]);\n        return t(function (e) {\n          return c && 0 !== s.length ? s.includes(e.id) ? g(e) : C(e) : p(e);\n        }, [p, g, C, c, s]);\n      }({\n        size: x,\n        activeSize: B,\n        inactiveSize: w,\n        color: E,\n        borderWidth: P,\n        borderColor: q,\n        isInteractive: V,\n        activeNodeIds: re\n      }),\n      ce = o(function () {\n        return null === $ ? null : $.map(function (e) {\n          return L({}, e, ae(e));\n        });\n      }, [$, ae]),\n      le = l(),\n      se = F(J),\n      ue = W(Q, le),\n      ve = o(function () {\n        return null === ne || null === ce ? null : ne.map(function (e) {\n          var n = e.index,\n            i = D(e, H),\n            o = {\n              id: i.source.id + \".\" + i.target.id,\n              data: i.data,\n              index: n,\n              source: ce.find(function (e) {\n                return e.id === i.source.id;\n              }),\n              target: ce.find(function (e) {\n                return e.id === i.target.id;\n              })\n            };\n          return L({}, o, {\n            thickness: se(o),\n            color: ue(o)\n          });\n        });\n      }, [ne, ce, se, ue]);\n    return {\n      nodes: ce,\n      links: ve,\n      activeNodeIds: re,\n      setActiveNodeIds: de\n    };\n  },\n  G = function (e) {\n    return {\n      x: e.x,\n      y: e.y\n    };\n  },\n  J = function (e) {\n    return {\n      size: e.size,\n      width: e.size,\n      height: e.size\n    };\n  },\n  K = function (e, n) {\n    return B({\n      data: e,\n      annotations: n,\n      getPosition: G,\n      getDimensions: J\n    });\n  },\n  Q = function (e) {\n    var n = e.links,\n      i = e.linkComponent,\n      t = e.blendMode,\n      d = s(),\n      a = d.animate,\n      c = d.config,\n      l = o(function () {\n        return [function (e) {\n          return {\n            x1: e.source.x,\n            y1: e.source.y,\n            x2: e.source.x,\n            y2: e.source.y,\n            color: e.color,\n            opacity: 0\n          };\n        }, function (e) {\n          return {\n            x1: e.source.x,\n            y1: e.source.y,\n            x2: e.target.x,\n            y2: e.target.y,\n            color: e.color,\n            opacity: 1\n          };\n        }];\n      }, []),\n      u = l[0],\n      v = l[1],\n      f = y(n, {\n        keys: function (e) {\n          return e.id;\n        },\n        initial: v,\n        from: u,\n        enter: v,\n        update: v,\n        expires: !0,\n        config: c,\n        immediate: !a\n      });\n    return C(M, {\n      children: f(function (e, n) {\n        return r(i, {\n          key: n.id,\n          link: n,\n          animated: e,\n          blendMode: t\n        });\n      })\n    });\n  },\n  U = function (e) {\n    var n = e.nodes,\n      i = e.nodeComponent,\n      d = e.onMouseEnter,\n      a = e.onMouseMove,\n      c = e.onMouseLeave,\n      l = e.onClick,\n      u = e.tooltip,\n      v = e.setActiveNodeIds,\n      f = e.isInteractive,\n      h = s(),\n      k = h.animate,\n      p = h.config,\n      m = o(function () {\n        return [function (e) {\n          return {\n            x: e.x,\n            y: e.y,\n            size: e.size,\n            color: e.color,\n            borderWidth: e.borderWidth,\n            borderColor: e.borderColor,\n            scale: 0,\n            opacity: 0\n          };\n        }, function (e) {\n          return {\n            x: e.x,\n            y: e.y,\n            size: e.size,\n            color: e.color,\n            borderWidth: e.borderWidth,\n            borderColor: e.borderColor,\n            scale: 1,\n            opacity: 1\n          };\n        }, function (e) {\n          return {\n            x: e.x,\n            y: e.y,\n            size: e.size,\n            color: e.color,\n            borderWidth: e.borderWidth,\n            borderColor: e.borderColor,\n            scale: 0,\n            opacity: 0\n          };\n        }];\n      }, []),\n      g = m[0],\n      x = m[1],\n      b = m[2],\n      I = y(n, {\n        keys: function (e) {\n          return e.id;\n        },\n        initial: x,\n        from: g,\n        enter: x,\n        update: x,\n        leave: b,\n        config: p,\n        immediate: !k\n      }),\n      S = z(),\n      N = S.showTooltipFromEvent,\n      W = S.hideTooltip,\n      B = t(function (e, n) {\n        N(r(u, {\n          node: e\n        }), n), v([e.id]), null == d || d(e, n);\n      }, [N, u, v, d]),\n      T = t(function (e, n) {\n        N(r(u, {\n          node: e\n        }), n), null == a || a(e, n);\n      }, [N, u, a]),\n      w = t(function (e, n) {\n        W(), v([]), null == c || c(e, n);\n      }, [W, v, c]);\n    return C(M, {\n      children: I(function (e, n) {\n        return r(i, {\n          key: n.id,\n          node: n,\n          animated: e,\n          onMouseEnter: f ? B : void 0,\n          onMouseMove: f ? T : void 0,\n          onMouseLeave: f ? w : void 0,\n          onClick: f ? l : void 0\n        });\n      })\n    });\n  },\n  V = function (e) {\n    var n = e.nodes,\n      i = e.annotations,\n      o = K(n, i);\n    return C(M, {\n      children: o.map(function (e, n) {\n        return C(T, L({}, e), n);\n      })\n    });\n  },\n  X = [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"],\n  Y = function (e) {\n    var n = e.width,\n      i = e.height,\n      t = e.margin,\n      a = e.data,\n      c = a.nodes,\n      l = a.links,\n      s = e.linkDistance,\n      u = void 0 === s ? P.linkDistance : s,\n      h = e.centeringStrength,\n      k = void 0 === h ? P.centeringStrength : h,\n      p = e.repulsivity,\n      m = void 0 === p ? P.repulsivity : p,\n      g = e.distanceMin,\n      y = void 0 === g ? P.distanceMin : g,\n      M = e.distanceMax,\n      x = void 0 === M ? P.distanceMax : M,\n      z = e.iterations,\n      b = void 0 === z ? P.iterations : z,\n      I = e.layers,\n      S = void 0 === I ? P.layers : I,\n      N = e.nodeComponent,\n      W = void 0 === N ? P.nodeComponent : N,\n      B = e.nodeSize,\n      T = void 0 === B ? P.nodeSize : B,\n      w = e.activeNodeSize,\n      A = void 0 === w ? P.activeNodeSize : w,\n      L = e.inactiveNodeSize,\n      D = void 0 === L ? P.inactiveNodeSize : L,\n      E = e.nodeColor,\n      R = void 0 === E ? P.nodeColor : E,\n      O = e.nodeBorderWidth,\n      j = void 0 === O ? P.nodeBorderWidth : O,\n      H = e.nodeBorderColor,\n      F = void 0 === H ? P.nodeBorderColor : H,\n      G = e.linkComponent,\n      J = void 0 === G ? P.linkComponent : G,\n      K = e.linkThickness,\n      X = void 0 === K ? P.linkThickness : K,\n      Y = e.linkColor,\n      Z = void 0 === Y ? P.linkColor : Y,\n      $ = e.linkBlendMode,\n      _ = void 0 === $ ? P.linkBlendMode : $,\n      ee = e.annotations,\n      ne = void 0 === ee ? P.annotations : ee,\n      ie = e.isInteractive,\n      oe = void 0 === ie ? P.isInteractive : ie,\n      te = e.defaultActiveNodeIds,\n      re = void 0 === te ? P.defaultActiveNodeIds : te,\n      de = e.nodeTooltip,\n      ae = void 0 === de ? P.nodeTooltip : de,\n      ce = e.onMouseEnter,\n      le = e.onMouseMove,\n      se = e.onMouseLeave,\n      ue = e.onClick,\n      ve = e.role,\n      fe = void 0 === ve ? P.role : ve,\n      he = e.ariaLabel,\n      ke = e.ariaLabelledBy,\n      pe = e.ariaDescribedBy,\n      me = v(n, i, t),\n      ge = me.margin,\n      ye = me.innerWidth,\n      Ce = me.innerHeight,\n      Me = me.outerWidth,\n      xe = me.outerHeight,\n      ze = q({\n        center: [ye / 2, Ce / 2],\n        nodes: c,\n        links: l,\n        linkDistance: u,\n        centeringStrength: k,\n        repulsivity: m,\n        distanceMin: y,\n        distanceMax: x,\n        iterations: b,\n        nodeSize: T,\n        activeNodeSize: A,\n        inactiveNodeSize: D,\n        nodeColor: R,\n        nodeBorderWidth: j,\n        nodeBorderColor: F,\n        linkThickness: X,\n        linkColor: Z,\n        isInteractive: oe,\n        defaultActiveNodeIds: re\n      }),\n      be = ze.nodes,\n      Ie = ze.links,\n      Se = ze.activeNodeIds,\n      Ne = ze.setActiveNodeIds,\n      We = {\n        links: null,\n        nodes: null,\n        annotations: null\n      };\n    S.includes(\"links\") && null !== Ie && (We.links = C(Q, {\n      links: Ie,\n      linkComponent: J,\n      blendMode: _\n    }, \"links\")), S.includes(\"nodes\") && null !== be && (We.nodes = C(U, {\n      nodes: be,\n      nodeComponent: W,\n      onMouseEnter: ce,\n      onMouseMove: le,\n      onMouseLeave: se,\n      onClick: ue,\n      tooltip: ae,\n      setActiveNodeIds: Ne,\n      isInteractive: oe\n    }, \"nodes\")), S.includes(\"annotations\") && null !== be && (We.annotations = C(V, {\n      nodes: be,\n      annotations: ne\n    }, \"annotations\"));\n    var Be = o(function () {\n      return {\n        nodes: be || [],\n        links: Ie || [],\n        activeNodeIds: Se,\n        setActiveNodeIds: Ne\n      };\n    }, [be, Ie, Se, Ne]);\n    return C(f, {\n      width: Me,\n      height: xe,\n      margin: ge,\n      role: fe,\n      ariaLabel: he,\n      ariaLabelledBy: ke,\n      ariaDescribedBy: pe,\n      children: S.map(function (e, n) {\n        var i;\n        return \"function\" == typeof e ? C(d, {\n          children: r(e, Be)\n        }, n) : null != (i = null == We ? void 0 : We[e]) ? i : null;\n      })\n    });\n  },\n  Z = function (e) {\n    var n = e.isInteractive,\n      i = void 0 === n ? P.isInteractive : n,\n      o = e.animate,\n      t = void 0 === o ? P.animate : o,\n      r = e.motionConfig,\n      d = void 0 === r ? P.motionConfig : r,\n      a = e.theme,\n      c = e.renderWrapper,\n      l = D(e, X);\n    return C(u, {\n      animate: t,\n      isInteractive: i,\n      motionConfig: d,\n      renderWrapper: c,\n      theme: a,\n      children: C(Y, L({\n        isInteractive: i\n      }, l))\n    });\n  },\n  $ = function (e) {\n    return C(h, {\n      children: function (n) {\n        var i = n.width,\n          o = n.height;\n        return C(Z, L({\n          width: i,\n          height: o\n        }, e));\n      }\n    });\n  },\n  _ = [\"theme\", \"isInteractive\", \"animate\", \"motionConfig\", \"renderWrapper\"],\n  ee = function (e) {\n    var n = e.width,\n      d = e.height,\n      a = e.margin,\n      s = e.pixelRatio,\n      u = void 0 === s ? j.pixelRatio : s,\n      f = e.data,\n      h = f.nodes,\n      m = f.links,\n      g = e.linkDistance,\n      y = void 0 === g ? j.linkDistance : g,\n      M = e.centeringStrength,\n      x = void 0 === M ? j.centeringStrength : M,\n      b = e.repulsivity,\n      I = void 0 === b ? j.repulsivity : b,\n      S = e.distanceMin,\n      N = void 0 === S ? j.distanceMin : S,\n      W = e.distanceMax,\n      B = void 0 === W ? j.distanceMax : W,\n      T = e.iterations,\n      L = void 0 === T ? j.iterations : T,\n      D = e.layers,\n      E = void 0 === D ? j.layers : D,\n      R = e.renderNode,\n      O = void 0 === R ? j.renderNode : R,\n      P = e.nodeSize,\n      H = void 0 === P ? j.nodeSize : P,\n      F = e.activeNodeSize,\n      G = void 0 === F ? j.activeNodeSize : F,\n      J = e.inactiveNodeSize,\n      Q = void 0 === J ? j.inactiveNodeSize : J,\n      U = e.nodeColor,\n      V = void 0 === U ? j.nodeColor : U,\n      X = e.nodeBorderWidth,\n      Y = void 0 === X ? j.nodeBorderWidth : X,\n      Z = e.nodeBorderColor,\n      $ = void 0 === Z ? j.nodeBorderColor : Z,\n      _ = e.renderLink,\n      ee = void 0 === _ ? j.renderLink : _,\n      ne = e.linkThickness,\n      ie = void 0 === ne ? j.linkThickness : ne,\n      oe = e.linkColor,\n      te = void 0 === oe ? j.linkColor : oe,\n      re = e.annotations,\n      de = void 0 === re ? j.annotations : re,\n      ae = e.isInteractive,\n      ce = void 0 === ae ? j.isInteractive : ae,\n      le = e.defaultActiveNodeIds,\n      se = void 0 === le ? j.defaultActiveNodeIds : le,\n      ue = e.nodeTooltip,\n      ve = void 0 === ue ? j.nodeTooltip : ue,\n      fe = e.onClick,\n      he = e.canvasRef,\n      ke = c(null),\n      pe = v(n, d, a),\n      me = pe.margin,\n      ge = pe.innerWidth,\n      ye = pe.innerHeight,\n      Ce = pe.outerWidth,\n      Me = pe.outerHeight,\n      xe = q({\n        center: [ge / 2, ye / 2],\n        nodes: h,\n        links: m,\n        linkDistance: y,\n        centeringStrength: x,\n        repulsivity: I,\n        distanceMin: N,\n        distanceMax: B,\n        iterations: L,\n        nodeSize: H,\n        activeNodeSize: G,\n        inactiveNodeSize: Q,\n        nodeColor: V,\n        nodeBorderWidth: Y,\n        nodeBorderColor: $,\n        linkThickness: ie,\n        linkColor: te,\n        isInteractive: ce,\n        defaultActiveNodeIds: se\n      }),\n      ze = xe.nodes,\n      be = xe.links,\n      Ie = xe.activeNodeIds,\n      Se = xe.setActiveNodeIds,\n      Ne = K(ze, de),\n      We = w({\n        annotations: Ne\n      }),\n      Be = o(function () {\n        return {\n          nodes: ze || [],\n          links: be || [],\n          activeNodeIds: Ie,\n          setActiveNodeIds: Se\n        };\n      }, [ze, be, Ie, Se]),\n      Te = l();\n    i(function () {\n      if (null !== ke.current) {\n        ke.current.width = Ce * u, ke.current.height = Me * u;\n        var e = ke.current.getContext(\"2d\");\n        e.scale(u, u), e.fillStyle = Te.background, e.fillRect(0, 0, Ce, Me), e.translate(me.left, me.top), E.forEach(function (n) {\n          \"links\" === n && null !== be ? be.forEach(function (n) {\n            return ee(e, n);\n          }) : \"nodes\" === n && null !== ze ? ze.forEach(function (n) {\n            return O(e, n);\n          }) : \"annotations\" === n ? A(e, {\n            annotations: We,\n            theme: Te\n          }) : \"function\" == typeof n && null !== ze && null !== be && n(e, Be);\n        });\n      }\n    }, [ke, Ce, Me, me.left, me.top, u, E, Te, ze, be, O, ee, We, Be]);\n    var we = t(function (e) {\n        if (ke.current && null !== ze) {\n          var n = k(ke.current, e),\n            i = n[0],\n            o = n[1];\n          return ze.find(function (e) {\n            return p(e.x, e.y, i - me.left, o - me.top) <= e.size / 2;\n          });\n        }\n      }, [ke, me, ze]),\n      Ae = z(),\n      Le = Ae.showTooltipFromEvent,\n      De = Ae.hideTooltip,\n      Ee = t(function (e) {\n        var n = we(e);\n        n ? (Le(r(ve, {\n          node: n\n        }), e), Se([n.id])) : (De(), Se([]));\n      }, [we, Le, ve, De, Se]),\n      Re = t(function () {\n        De(), Se([]);\n      }, [De, Se]),\n      Oe = t(function (e) {\n        if (fe) {\n          var n = we(e);\n          n && fe(n, e);\n        }\n      }, [we, fe]);\n    return C(\"canvas\", {\n      ref: function (e) {\n        ke.current = e, he && \"current\" in he && (he.current = e);\n      },\n      width: Ce * u,\n      height: Me * u,\n      style: {\n        width: Ce,\n        height: Me,\n        cursor: ce ? \"auto\" : \"normal\"\n      },\n      onClick: ce ? Oe : void 0,\n      onMouseEnter: ce ? Ee : void 0,\n      onMouseLeave: ce ? Re : void 0,\n      onMouseMove: ce ? Ee : void 0\n    });\n  },\n  ne = a(function (e, n) {\n    var i = e.theme,\n      o = e.isInteractive,\n      t = void 0 === o ? j.isInteractive : o,\n      r = e.animate,\n      d = void 0 === r ? j.animate : r,\n      a = e.motionConfig,\n      c = void 0 === a ? j.motionConfig : a,\n      l = e.renderWrapper,\n      s = D(e, _);\n    return C(u, {\n      isInteractive: t,\n      animate: d,\n      motionConfig: c,\n      theme: i,\n      renderWrapper: l,\n      children: C(ee, L({\n        isInteractive: t\n      }, s, {\n        canvasRef: n\n      }))\n    });\n  }),\n  ie = a(function (e, n) {\n    return C(h, {\n      children: function (i) {\n        var o = i.width,\n          t = i.height;\n        return C(ne, L({\n          width: o,\n          height: t\n        }, e, {\n          ref: n\n        }));\n      }\n    });\n  });\nexport { Z as Network, ne as NetworkCanvas, $ as ResponsiveNetwork, ie as ResponsiveNetworkCanvas, j as canvasDefaultProps, O as commonDefaultProps, P as svgDefaultProps, q as useNetwork, K as useNodeAnnotations };","map":{"version":3,"names":["E","e","n","node","i","animated","o","onClick","t","onMouseEnter","r","onMouseMove","d","onMouseLeave","C","m","circle","id","transform","g","x","y","scale","size","fill","color","strokeWidth","borderWidth","stroke","borderColor","opacity","R","link","blendMode","line","style","mixBlendMode","thickness","strokeLinecap","x1","y1","x2","y2","O","layers","linkDistance","centeringStrength","repulsivity","distanceMin","distanceMax","iterations","nodeSize","activeNodeSize","inactiveNodeSize","nodeColor","nodeBorderWidth","nodeBorderColor","from","linkThickness","linkColor","isInteractive","defaultActiveNodeIds","nodeTooltip","enableChip","annotations","animate","motionConfig","role","P","L","nodeComponent","linkComponent","linkBlendMode","j","renderNode","fillStyle","beginPath","arc","Math","PI","strokeStyle","lineWidth","renderLink","moveTo","source","lineTo","target","pixelRatio","window","devicePixelRatio","H","F","useDerivedProp","q","useNetwork","center","nodes","a","links","c","s","u","v","f","h","k","p","M","z","B","T","w","A","G","J","K","Q","U","V","X","Y","Z","$","_","ee","ne","ie","oe","l","I","distance","data","strength","charge","S","N","map","index","vx","vy","find","b","force","stop","tick","te","re","de","ae","activeSize","inactiveSize","activeNodeIds","W","length","includes","ce","le","se","ue","ve","D","setActiveNodeIds","getNodeAnnotationPosition","getNodeAnnotationDimensions","width","height","useNodeAnnotations","getPosition","getDimensions","NetworkLinks","config","keys","initial","enter","update","expires","immediate","children","key","NetworkNodes","tooltip","leave","showTooltipFromEvent","hideTooltip","NetworkNodeAnnotations","InnerNetwork","margin","fe","he","ariaLabel","ke","ariaLabelledBy","pe","ariaDescribedBy","me","ge","ye","innerWidth","Ce","innerHeight","Me","outerWidth","xe","outerHeight","ze","be","Ie","Se","Ne","We","Be","Network","theme","renderWrapper","ResponsiveNetwork","InnerNetworkCanvas","canvasRef","Te","current","getContext","background","fillRect","translate","left","top","forEach","we","Ae","Le","De","Ee","Re","Oe","ref","cursor","NetworkCanvas","ResponsiveNetworkCanvas","canvasDefaultProps","commonDefaultProps","svgDefaultProps"],"sources":["/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkNode.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkLink.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/defaults.ts","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkNodeTooltip.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/renderCanvasNode.ts","/gsoc/git/d3js/node_modules/@nivo/network/src/renderCanvasLink.ts","/gsoc/git/d3js/node_modules/@nivo/network/src/hooks.ts","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkLinks.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkNodes.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkNodeAnnotations.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/Network.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/ResponsiveNetwork.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/NetworkCanvas.tsx","/gsoc/git/d3js/node_modules/@nivo/network/src/ResponsiveNetworkCanvas.tsx"],"sourcesContent":["import { memo } from 'react'\nimport { animated, to } from '@react-spring/web'\nimport { InputNode, NodeProps } from './types'\n\nconst NonMemoizedNetworkNode = <Node extends InputNode>({\n    node,\n    animated: animatedProps,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: NodeProps<Node>) => (\n    <animated.circle\n        data-testid={`node.${node.id}`}\n        transform={to([animatedProps.x, animatedProps.y, animatedProps.scale], (x, y, scale) => {\n            return `translate(${x},${y}) scale(${scale})`\n        })}\n        r={to([animatedProps.size], size => size / 2)}\n        fill={animatedProps.color}\n        strokeWidth={animatedProps.borderWidth}\n        stroke={animatedProps.borderColor}\n        opacity={animatedProps.opacity}\n        onClick={onClick ? event => onClick(node, event) : undefined}\n        onMouseEnter={onMouseEnter ? event => onMouseEnter(node, event) : undefined}\n        onMouseMove={onMouseMove ? event => onMouseMove(node, event) : undefined}\n        onMouseLeave={onMouseLeave ? event => onMouseLeave(node, event) : undefined}\n    />\n)\n\nexport const NetworkNode = memo(NonMemoizedNetworkNode) as typeof NonMemoizedNetworkNode\n","import { animated } from '@react-spring/web'\nimport { InputLink, InputNode, LinkProps } from './types'\nimport { memo } from 'react'\n\nconst NonMemoizedNetworkLink = <Node extends InputNode, Link extends InputLink>({\n    link,\n    animated: animatedProps,\n    blendMode,\n}: LinkProps<Node, Link>) => (\n    <animated.line\n        data-testid={`link.${link.id}`}\n        stroke={animatedProps.color}\n        style={{ mixBlendMode: blendMode }}\n        strokeWidth={link.thickness}\n        strokeLinecap=\"round\"\n        opacity={animatedProps.opacity}\n        x1={animatedProps.x1}\n        y1={animatedProps.y1}\n        x2={animatedProps.x2}\n        y2={animatedProps.y2}\n    />\n)\n\nexport const NetworkLink = memo(NonMemoizedNetworkLink) as typeof NonMemoizedNetworkLink\n","import { NetworkCommonProps, InputNode, LayerId, NetworkSvgProps, InputLink } from './types'\nimport { NetworkNode } from './NetworkNode'\nimport { renderCanvasNode } from './renderCanvasNode'\nimport { NetworkLink } from './NetworkLink'\nimport { renderCanvasLink } from './renderCanvasLink'\nimport { NetworkNodeTooltip } from './NetworkNodeTooltip'\n\nexport const commonDefaultProps: Omit<\n    NetworkCommonProps<InputNode, InputLink>,\n    | 'margin'\n    | 'theme'\n    | 'onClick'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> & {\n    layers: LayerId[]\n} = {\n    layers: ['links', 'nodes', 'annotations'],\n\n    linkDistance: 30,\n    centeringStrength: 1,\n    repulsivity: 10,\n    distanceMin: 1,\n    distanceMax: Infinity,\n    iterations: 120,\n\n    nodeSize: 12,\n    activeNodeSize: 18,\n    inactiveNodeSize: 8,\n    nodeColor: '#000000',\n    nodeBorderWidth: 0,\n    nodeBorderColor: { from: 'color' },\n\n    linkThickness: 1,\n    linkColor: { from: 'source.color' },\n\n    isInteractive: true,\n    defaultActiveNodeIds: [],\n    nodeTooltip: NetworkNodeTooltip,\n\n    annotations: [],\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    role: 'img',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    nodeComponent: NetworkNode as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['nodeComponent']\n    >,\n    linkComponent: NetworkLink as NonNullable<\n        NetworkSvgProps<InputNode, InputLink>['linkComponent']\n    >,\n    linkBlendMode: 'normal' as NonNullable<NetworkSvgProps<InputNode, InputLink>['linkBlendMode']>,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    renderNode: renderCanvasNode,\n    renderLink: renderCanvasLink,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { InputNode, NodeTooltipProps } from './types'\n\nexport const NetworkNodeTooltip = <Node extends InputNode>({ node }: NodeTooltipProps<Node>) => (\n    <BasicTooltip id={node.id} enableChip={true} color={node.color} />\n)\n","import { ComputedNode, InputNode } from './types'\n\nexport const renderCanvasNode = <Node extends InputNode>(\n    ctx: CanvasRenderingContext2D,\n    node: ComputedNode<Node>\n) => {\n    ctx.fillStyle = node.color\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fill()\n\n    if (node.borderWidth > 0) {\n        ctx.strokeStyle = node.borderColor\n        ctx.lineWidth = node.borderWidth\n        ctx.stroke()\n    }\n}\n","import { InputNode, ComputedLink, InputLink } from './types'\n\nexport const renderCanvasLink = <Node extends InputNode, Link extends InputLink>(\n    ctx: CanvasRenderingContext2D,\n    link: ComputedLink<Node, Link>\n) => {\n    ctx.strokeStyle = link.color\n    ctx.lineWidth = link.thickness\n\n    ctx.beginPath()\n    ctx.moveTo(link.source.x, link.source.y)\n    ctx.lineTo(link.target.x, link.target.y)\n    ctx.stroke()\n}\n","import { useState, useEffect, useMemo, useCallback } from 'react'\nimport { forceSimulation, forceManyBody, forceCenter, forceLink } from 'd3-force'\nimport { useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { commonDefaultProps } from './defaults'\nimport {\n    InputLink,\n    InputNode,\n    NetworkCommonProps,\n    DerivedProp,\n    ComputedNode,\n    ComputedLink,\n    TransientNode,\n    TransientLink,\n} from './types'\n\nconst useDerivedProp = <Target, Output extends string | number>(\n    instruction: DerivedProp<Target, Output>\n) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useComputeForces = <Node extends InputNode, Link extends InputLink>({\n    linkDistance,\n    centeringStrength,\n    repulsivity,\n    distanceMin,\n    distanceMax,\n    center,\n}: {\n    linkDistance: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax: NetworkCommonProps<Node, Link>['distanceMax']\n    center: [number, number]\n}) => {\n    const getLinkDistance = useDerivedProp<Link, number>(linkDistance)\n\n    const centerX = center[0]\n    const centerY = center[1]\n\n    return useMemo(() => {\n        const linkForce = forceLink<TransientNode<Node>, TransientLink<Node, Link>>()\n            .distance(link => getLinkDistance(link.data))\n            .strength(centeringStrength)\n\n        const chargeForce = forceManyBody()\n            .strength(-repulsivity)\n            .distanceMin(distanceMin)\n            .distanceMax(distanceMax)\n\n        const centerForce = forceCenter(centerX, centerY)\n\n        return { link: linkForce, charge: chargeForce, center: centerForce }\n    }, [\n        getLinkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        centerX,\n        centerY,\n    ])\n}\n\nconst useNodeStyle = <Node extends InputNode, Link extends InputLink>({\n    size,\n    activeSize,\n    inactiveSize,\n    color,\n    borderWidth,\n    borderColor,\n    isInteractive,\n    activeNodeIds,\n}: {\n    size: NetworkCommonProps<Node, Link>['nodeSize']\n    activeSize: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveSize: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    color: NetworkCommonProps<Node, Link>['nodeColor']\n    borderWidth: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    borderColor: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    isInteractive: NetworkCommonProps<Node, Link>['isInteractive']\n    activeNodeIds: string[]\n}) => {\n    const theme = useTheme()\n\n    const getSize = useDerivedProp(size)\n    const getColor = useDerivedProp(color)\n    const getBorderWidth = useDerivedProp(borderWidth)\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getNormalStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getActiveSize = useDerivedProp(activeSize)\n    const getActiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getActiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getActiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    const getInactiveSize = useDerivedProp(inactiveSize)\n    const getInactiveStyle = useCallback(\n        (node: TransientNode<Node>) => {\n            const color = getColor(node.data)\n\n            return {\n                size: getInactiveSize(node.data),\n                color,\n                borderWidth: getBorderWidth(node.data),\n                borderColor: getBorderColor({ ...node, color }),\n            }\n        },\n        [getInactiveSize, getColor, getBorderWidth, getBorderColor]\n    )\n\n    return useCallback(\n        (node: TransientNode<Node>) => {\n            if (!isInteractive || activeNodeIds.length === 0) return getNormalStyle(node)\n            if (activeNodeIds.includes(node.id)) return getActiveStyle(node)\n            return getInactiveStyle(node)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeNodeIds]\n    )\n}\n\nexport const useNetwork = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    center,\n    nodes,\n    links,\n    linkDistance = commonDefaultProps.linkDistance,\n    centeringStrength = commonDefaultProps.centeringStrength,\n    repulsivity = commonDefaultProps.repulsivity,\n    distanceMin = commonDefaultProps.distanceMin,\n    distanceMax = commonDefaultProps.distanceMax,\n    iterations = commonDefaultProps.iterations,\n    nodeSize = commonDefaultProps.nodeSize,\n    activeNodeSize = commonDefaultProps.activeNodeSize,\n    inactiveNodeSize = commonDefaultProps.inactiveNodeSize,\n    nodeColor = commonDefaultProps.nodeColor,\n    nodeBorderWidth = commonDefaultProps.nodeBorderWidth,\n    nodeBorderColor = commonDefaultProps.nodeBorderColor,\n    linkThickness = commonDefaultProps.linkThickness,\n    linkColor = commonDefaultProps.linkColor,\n    isInteractive = commonDefaultProps.isInteractive,\n    defaultActiveNodeIds = commonDefaultProps.defaultActiveNodeIds,\n}: {\n    center: [number, number]\n    nodes: Node[]\n    links: Link[]\n    linkDistance?: NetworkCommonProps<Node, Link>['linkDistance']\n    centeringStrength?: NetworkCommonProps<Node, Link>['centeringStrength']\n    repulsivity?: NetworkCommonProps<Node, Link>['repulsivity']\n    distanceMin?: NetworkCommonProps<Node, Link>['distanceMin']\n    distanceMax?: NetworkCommonProps<Node, Link>['distanceMax']\n    iterations?: NetworkCommonProps<Node, Link>['iterations']\n    nodeSize?: NetworkCommonProps<Node, Link>['nodeSize']\n    activeNodeSize?: NetworkCommonProps<Node, Link>['activeNodeSize']\n    inactiveNodeSize?: NetworkCommonProps<Node, Link>['inactiveNodeSize']\n    nodeColor?: NetworkCommonProps<Node, Link>['nodeColor']\n    nodeBorderWidth?: NetworkCommonProps<Node, Link>['nodeBorderWidth']\n    nodeBorderColor?: NetworkCommonProps<Node, Link>['nodeBorderColor']\n    linkThickness?: NetworkCommonProps<Node, Link>['linkThickness']\n    linkColor?: NetworkCommonProps<Node, Link>['linkColor']\n    isInteractive?: NetworkCommonProps<Node, Link>['isInteractive']\n    defaultActiveNodeIds?: NetworkCommonProps<Node, Link>['defaultActiveNodeIds']\n}) => {\n    // we're using `null` instead of empty array so that we can dissociate\n    // initial rendering from updates when using transitions.\n    const [transientNodes, setTransientNodes] = useState<null | TransientNode<Node>[]>(null)\n    const [transientLinks, setTransientLinks] = useState<null | TransientLink<Node, Link>[]>(null)\n\n    const forces = useComputeForces<Node, Link>({\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        center,\n    })\n\n    useEffect(() => {\n        // copy the nodes & links to avoid mutating the original ones.\n        const _transientNodes: TransientNode<Node>[] = nodes.map(node => ({\n            id: node.id,\n            data: { ...node },\n            // the properties below are populated by D3, via mutations\n            index: 0,\n            x: 0,\n            y: 0,\n            vx: 0,\n            vy: 0,\n        }))\n        const _transientLinks: TransientLink<Node, Link>[] = links.map(link => ({\n            data: { ...link },\n            // populated by D3, via mutation\n            index: 0,\n            // replace ids with objects, otherwise D3 does this automatically\n            // which is a bit annoying with typings because then `source` & `target`\n            // can be either strings (before the simulation) or an objects (after).\n            source: _transientNodes.find(node => node.id === link.source)!,\n            target: _transientNodes.find(node => node.id === link.target)!,\n        }))\n\n        const simulation = forceSimulation(_transientNodes)\n            .force('link', forces.link.links(_transientLinks))\n            .force('charge', forces.charge)\n            .force('center', forces.center)\n            .stop()\n\n        // this will set `index`, `x`, `y`, `vx`, `vy` for each node.\n        simulation.tick(iterations)\n\n        setTransientNodes(_transientNodes)\n        setTransientLinks(_transientLinks)\n\n        return () => {\n            simulation.stop()\n        }\n    }, [nodes, links, forces, iterations, setTransientNodes, setTransientLinks])\n\n    const [activeNodeIds, setActiveNodeIds] = useState<string[]>(defaultActiveNodeIds)\n\n    const getNodeStyle = useNodeStyle<Node, Link>({\n        size: nodeSize,\n        activeSize: activeNodeSize,\n        inactiveSize: inactiveNodeSize,\n        color: nodeColor,\n        borderWidth: nodeBorderWidth,\n        borderColor: nodeBorderColor,\n        isInteractive,\n        activeNodeIds,\n    })\n    const computedNodes: ComputedNode<Node>[] | null = useMemo(() => {\n        if (transientNodes === null) return null\n\n        return transientNodes.map(node => ({\n            ...node,\n            ...getNodeStyle(node),\n        }))\n    }, [transientNodes, getNodeStyle])\n\n    const theme = useTheme()\n    const getLinkThickness = useDerivedProp(linkThickness)\n    const getLinkColor = useInheritedColor(linkColor, theme)\n\n    const computedLinks: ComputedLink<Node, Link>[] | null = useMemo(() => {\n        if (transientLinks === null || computedNodes === null) return null\n\n        return transientLinks.map(({ index, ...link }) => {\n            const linkWithComputedNodes: Omit<ComputedLink<Node, Link>, 'color' | 'thickness'> = {\n                id: `${link.source.id}.${link.target.id}`,\n                data: link.data,\n                index,\n                source: computedNodes.find(node => node.id === link.source.id)!,\n                target: computedNodes.find(node => node.id === link.target.id)!,\n            }\n\n            return {\n                ...linkWithComputedNodes,\n                thickness: getLinkThickness(linkWithComputedNodes),\n                color: getLinkColor(linkWithComputedNodes),\n            }\n        })\n    }, [transientLinks, computedNodes, getLinkThickness, getLinkColor])\n\n    return {\n        nodes: computedNodes,\n        links: computedLinks,\n        activeNodeIds,\n        setActiveNodeIds,\n    }\n}\n\nconst getNodeAnnotationPosition = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = <Node extends InputNode>(node: ComputedNode<Node>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useNodeAnnotations = <Node extends InputNode>(\n    nodes: ComputedNode<Node>[],\n    annotations: AnnotationMatcher<ComputedNode<Node>>[]\n) =>\n    useAnnotations<ComputedNode<Node>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n","import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { ComputedLink, InputLink, InputNode, LinkComponent, NetworkSvgProps } from './types'\n\ninterface NetworkLinksProps<Node extends InputNode, Link extends InputLink> {\n    links: ComputedLink<Node, Link>[]\n    linkComponent: LinkComponent<Node, Link>\n    blendMode: NonNullable<NetworkSvgProps<Node, Link>['linkBlendMode']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.source.x,\n        y2: link.source.y,\n        color: link.color,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <Node extends InputNode, Link extends InputLink>() =>\n    (link: ComputedLink<Node, Link>) => ({\n        x1: link.source.x,\n        y1: link.source.y,\n        x2: link.target.x,\n        y2: link.target.y,\n        color: link.color,\n        opacity: 1,\n    })\n\nexport const NetworkLinks = <Node extends InputNode, Link extends InputLink>({\n    links,\n    linkComponent,\n    blendMode,\n}: NetworkLinksProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition] = useMemo(\n        () => [getEnterTransition<Node, Link>(), getRegularTransition<Node, Link>()],\n        []\n    )\n\n    const transition = useTransition<\n        ComputedLink<Node, Link>,\n        {\n            x1: number\n            y1: number\n            x2: number\n            y2: number\n            color: string\n            opacity: number\n        }\n    >(links, {\n        keys: link => link.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        expires: true,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, link) => {\n                return createElement(linkComponent, {\n                    key: link.id,\n                    link,\n                    animated: transitionProps,\n                    blendMode,\n                })\n            })}\n        </>\n    )\n}\n","import { createElement, useCallback, useMemo, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { InputNode, ComputedNode, NodeAnimatedProps, NetworkSvgProps, InputLink } from './types'\n\ninterface NetworkNodesProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    nodeComponent: NonNullable<NetworkSvgProps<Node, Link>['nodeComponent']>\n    onMouseEnter: NetworkSvgProps<Node, Link>['onMouseEnter']\n    onMouseMove: NetworkSvgProps<Node, Link>['onMouseMove']\n    onMouseLeave: NetworkSvgProps<Node, Link>['onMouseLeave']\n    onClick: NetworkSvgProps<Node, Link>['onClick']\n    tooltip: NonNullable<NetworkSvgProps<Node, Link>['nodeTooltip']>\n    setActiveNodeIds: (nodeIds: string[]) => void\n    isInteractive: NonNullable<NetworkSvgProps<Node, Link>['isInteractive']>\n}\n\nconst getEnterTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nconst getRegularTransition =\n    <N extends InputNode>() =>\n    (node: ComputedNode<N>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 1,\n        opacity: 1,\n    })\n\nconst getExitTransition =\n    <Node extends InputNode>() =>\n    (node: ComputedNode<Node>) => ({\n        x: node.x,\n        y: node.y,\n        size: node.size,\n        color: node.color,\n        borderWidth: node.borderWidth,\n        borderColor: node.borderColor,\n        scale: 0,\n        opacity: 0,\n    })\n\nexport const NetworkNodes = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    nodeComponent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    setActiveNodeIds,\n    isInteractive,\n}: NetworkNodesProps<Node, Link>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const [enterTransition, regularTransition, exitTransition] = useMemo(\n        () => [getEnterTransition<Node>(), getRegularTransition<Node>(), getExitTransition<Node>()],\n        []\n    )\n\n    const transition = useTransition<ComputedNode<Node>, NodeAnimatedProps>(nodes, {\n        keys: node => node.id,\n        initial: regularTransition,\n        from: enterTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: exitTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            setActiveNodeIds([node.id])\n            onMouseEnter?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, setActiveNodeIds, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ComputedNode<Node>, event: MouseEvent) => {\n            hideTooltip()\n            setActiveNodeIds([])\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, setActiveNodeIds, onMouseLeave]\n    )\n\n    return (\n        <>\n            {transition((transitionProps, node) =>\n                createElement(nodeComponent, {\n                    key: node.id,\n                    node,\n                    animated: transitionProps,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? onClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedNode, InputLink, InputNode, NetworkSvgProps } from './types'\nimport { useNodeAnnotations } from './hooks'\n\ninterface NetworkNodeAnnotationsProps<Node extends InputNode, Link extends InputLink> {\n    nodes: ComputedNode<Node>[]\n    annotations: NonNullable<NetworkSvgProps<Node, Link>['annotations']>\n}\n\nexport const NetworkNodeAnnotations = <Node extends InputNode, Link extends InputLink>({\n    nodes,\n    annotations,\n}: NetworkNodeAnnotationsProps<Node, Link>) => {\n    const boundAnnotations = useNodeAnnotations<Node>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { svgDefaultProps } from './defaults'\nimport { useNetwork } from './hooks'\nimport { NetworkLinks } from './NetworkLinks'\nimport { NetworkNodes } from './NetworkNodes'\nimport { NetworkNodeAnnotations } from './NetworkNodeAnnotations'\nimport {\n    InputNode,\n    LayerId,\n    NodeTooltip,\n    NetworkSvgProps,\n    InputLink,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkSvgProps<Node, Link>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerNetwork = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = svgDefaultProps.linkDistance,\n    centeringStrength = svgDefaultProps.centeringStrength,\n    repulsivity = svgDefaultProps.repulsivity,\n    distanceMin = svgDefaultProps.distanceMin,\n    distanceMax = svgDefaultProps.distanceMax,\n    iterations = svgDefaultProps.iterations,\n\n    layers = svgDefaultProps.layers,\n\n    nodeComponent = svgDefaultProps.nodeComponent as unknown as NonNullable<\n        NetworkSvgProps<Node, Link>['nodeComponent']\n    >,\n    nodeSize = svgDefaultProps.nodeSize,\n    activeNodeSize = svgDefaultProps.activeNodeSize,\n    inactiveNodeSize = svgDefaultProps.inactiveNodeSize,\n    nodeColor = svgDefaultProps.nodeColor,\n    nodeBorderWidth = svgDefaultProps.nodeBorderWidth,\n    nodeBorderColor = svgDefaultProps.nodeBorderColor,\n\n    linkComponent = svgDefaultProps.linkComponent as NonNullable<\n        NetworkSvgProps<Node, Link>['linkComponent']\n    >,\n    linkThickness = svgDefaultProps.linkThickness,\n    linkColor = svgDefaultProps.linkColor,\n    linkBlendMode = svgDefaultProps.linkBlendMode,\n\n    annotations = svgDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    defaultActiveNodeIds = svgDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = svgDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerNetworkProps<Node, Link>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        links: null,\n        nodes: null,\n        annotations: null,\n    }\n\n    if (layers.includes('links') && links !== null) {\n        layerById.links = (\n            <NetworkLinks<Node, Link>\n                key=\"links\"\n                links={links}\n                linkComponent={linkComponent}\n                blendMode={linkBlendMode}\n            />\n        )\n    }\n\n    if (layers.includes('nodes') && nodes !== null) {\n        layerById.nodes = (\n            <NetworkNodes<Node, Link>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={nodeTooltip}\n                setActiveNodeIds={setActiveNodeIds}\n                isInteractive={isInteractive}\n            />\n        )\n    }\n\n    if (layers.includes('annotations') && nodes !== null) {\n        layerById.annotations = (\n            <NetworkNodeAnnotations<Node, Link>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Network = <Node extends InputNode = InputNode, Link extends InputLink = InputLink>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: NetworkSvgProps<Node, Link>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerNetwork<Node, Link> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { InputLink, InputNode, NetworkSvgProps } from './types'\nimport { Network } from './Network'\n\nexport const ResponsiveNetwork = <\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkSvgProps<Node, Link>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Network<Node, Link> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import {\n    ForwardedRef,\n    forwardRef,\n    useCallback,\n    useRef,\n    useEffect,\n    createElement,\n    MouseEvent,\n    useMemo,\n} from 'react'\nimport { getDistance, getRelativeCursor, Container, useDimensions, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useComputedAnnotations, renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { canvasDefaultProps } from './defaults'\nimport { useNetwork, useNodeAnnotations } from './hooks'\nimport {\n    NetworkCanvasProps,\n    InputNode,\n    ComputedNode,\n    NodeTooltip,\n    InputLink,\n    NetworkSvgProps,\n    CustomLayerProps,\n} from './types'\n\ntype InnerNetworkCanvasProps<Node extends InputNode, Link extends InputLink> = Omit<\n    NetworkCanvasProps<Node, Link>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerNetworkCanvas = <Node extends InputNode, Link extends InputLink>({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n\n    data: { nodes: rawNodes, links: rawLinks },\n\n    linkDistance = canvasDefaultProps.linkDistance,\n    centeringStrength = canvasDefaultProps.centeringStrength,\n    repulsivity = canvasDefaultProps.repulsivity,\n    distanceMin = canvasDefaultProps.distanceMin,\n    distanceMax = canvasDefaultProps.distanceMax,\n    iterations = canvasDefaultProps.iterations,\n\n    layers = canvasDefaultProps.layers,\n\n    renderNode = canvasDefaultProps.renderNode,\n    nodeSize = canvasDefaultProps.nodeSize,\n    activeNodeSize = canvasDefaultProps.activeNodeSize,\n    inactiveNodeSize = canvasDefaultProps.inactiveNodeSize,\n    nodeColor = canvasDefaultProps.nodeColor,\n    nodeBorderWidth = canvasDefaultProps.nodeBorderWidth,\n    nodeBorderColor = canvasDefaultProps.nodeBorderColor,\n\n    renderLink = canvasDefaultProps.renderLink,\n    linkThickness = canvasDefaultProps.linkThickness,\n    linkColor = canvasDefaultProps.linkColor,\n\n    annotations = canvasDefaultProps.annotations as NonNullable<\n        NetworkSvgProps<Node, Link>['annotations']\n    >,\n\n    isInteractive = canvasDefaultProps.isInteractive,\n    defaultActiveNodeIds = canvasDefaultProps.defaultActiveNodeIds,\n    nodeTooltip = canvasDefaultProps.nodeTooltip as NodeTooltip<Node>,\n    onClick,\n    canvasRef,\n}: InnerNetworkCanvasProps<Node, Link>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, links, activeNodeIds, setActiveNodeIds } = useNetwork<Node, Link>({\n        center: [innerWidth / 2, innerHeight / 2],\n        nodes: rawNodes,\n        links: rawLinks,\n        linkDistance,\n        centeringStrength,\n        repulsivity,\n        distanceMin,\n        distanceMax,\n        iterations,\n        nodeSize,\n        activeNodeSize,\n        inactiveNodeSize,\n        nodeColor,\n        nodeBorderWidth,\n        nodeBorderColor,\n        linkThickness,\n        linkColor,\n        isInteractive,\n        defaultActiveNodeIds,\n    })\n\n    const boundAnnotations = useNodeAnnotations<Node>(nodes!, annotations)\n    const computedAnnotations = useComputedAnnotations<ComputedNode<Node>>({\n        annotations: boundAnnotations,\n    })\n\n    const customLayerProps: CustomLayerProps<Node, Link> = useMemo(\n        () => ({\n            nodes: nodes || [],\n            links: links || [],\n            activeNodeIds,\n            setActiveNodeIds,\n        }),\n        [nodes, links, activeNodeIds, setActiveNodeIds]\n    )\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'links' && links !== null) {\n                links.forEach(link => renderLink(ctx, link))\n            } else if (layer === 'nodes' && nodes !== null) {\n                nodes.forEach(node => renderNode(ctx, node))\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ComputedNode<Node>>(ctx, {\n                    annotations: computedAnnotations as any,\n                    theme,\n                })\n            } else if (typeof layer === 'function' && nodes !== null && links !== null) {\n                layer(ctx, customLayerProps)\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        margin.left,\n        margin.top,\n        pixelRatio,\n        layers,\n        theme,\n        nodes,\n        links,\n        renderNode,\n        renderLink,\n        computedAnnotations,\n        customLayerProps,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current || nodes === null) return undefined\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return nodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.size / 2\n            })\n        },\n        [canvasEl, margin, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                showTooltipFromEvent(createElement(nodeTooltip, { node }), event)\n                setActiveNodeIds([node.id])\n            } else {\n                hideTooltip()\n                setActiveNodeIds([])\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, nodeTooltip, hideTooltip, setActiveNodeIds]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setActiveNodeIds([])\n    }, [hideTooltip, setActiveNodeIds])\n\n    const handleClick = useCallback(\n        (event: MouseEvent) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n        />\n    )\n}\n\nexport const NetworkCanvas = forwardRef(\n    <Node extends InputNode = InputNode, Link extends InputLink = InputLink>(\n        {\n            theme,\n            isInteractive = canvasDefaultProps.isInteractive,\n            animate = canvasDefaultProps.animate,\n            motionConfig = canvasDefaultProps.motionConfig,\n            renderWrapper,\n            ...otherProps\n        }: NetworkCanvasProps<Node, Link>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n            <InnerNetworkCanvas<Node, Link>\n                isInteractive={isInteractive}\n                {...otherProps}\n                canvasRef={ref}\n            />\n        </Container>\n    )\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { NetworkCanvasProps, InputNode, InputLink } from './types'\nimport { NetworkCanvas } from './NetworkCanvas'\n\nexport const ResponsiveNetworkCanvas = forwardRef(function ResponsiveBarCanvas<\n    Node extends InputNode = InputNode,\n    Link extends InputLink = InputLink\n>(\n    props: Omit<NetworkCanvasProps<Node, Link>, 'height' | 'width'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <NetworkCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        NetworkCanvasProps<InputNode, InputLink>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAyBaA,CAAA,GAAcC,CAAA,CAzBI,UAAHA,CAAA;IAAA,IACxBC,CAAA,GAAID,CAAA,CAAJE,IAAA;MACUC,CAAA,GAAaH,CAAA,CAAvBI,QAAA;MACAC,CAAA,GAAOL,CAAA,CAAPM,OAAA;MACAC,CAAA,GAAYP,CAAA,CAAZQ,YAAA;MACAC,CAAA,GAAWT,CAAA,CAAXU,WAAA;MACAC,CAAA,GAAYX,CAAA,CAAZY,YAAA;IAAY,OAEZC,CAAA,CAACC,CAAA,CAASC,MAAA,EAAM;MACZ,eAAqB,UAAAd,CAAA,CAAKe,EAAA;MAC1BC,SAAA,EAAWC,CAAA,CAAG,CAACf,CAAA,CAAcgB,CAAA,EAAGhB,CAAA,CAAciB,CAAA,EAAGjB,CAAA,CAAckB,KAAA,GAAQ,UAACrB,CAAA,EAAGC,CAAA,EAAGE,CAAA;QAC1E,sBAAoBH,CAAA,GAAC,MAAIC,CAAA,GAAC,aAAWE,CAAA,GAAK,GAC9C;MAAA;MACAM,CAAA,EAAGS,CAAA,CAAG,CAACf,CAAA,CAAcmB,IAAA,GAAO,UAAAtB,CAAA;QAAI,OAAIA,CAAA,GAAO;MAAA;MAC3CuB,IAAA,EAAMpB,CAAA,CAAcqB,KAAA;MACpBC,WAAA,EAAatB,CAAA,CAAcuB,WAAA;MAC3BC,MAAA,EAAQxB,CAAA,CAAcyB,WAAA;MACtBC,OAAA,EAAS1B,CAAA,CAAc0B,OAAA;MACvBvB,OAAA,EAASD,CAAA,GAAU,UAAAL,CAAA;QAAK,OAAIK,CAAA,CAAQJ,CAAA,EAAMD,CAAA,CAAM;MAAA,SAAG;MACnDQ,YAAA,EAAcD,CAAA,GAAe,UAAAP,CAAA;QAAK,OAAIO,CAAA,CAAaN,CAAA,EAAMD,CAAA,CAAM;MAAA,SAAG;MAClEU,WAAA,EAAaD,CAAA,GAAc,UAAAT,CAAA;QAAK,OAAIS,CAAA,CAAYR,CAAA,EAAMD,CAAA,CAAM;MAAA,SAAG;MAC/DY,YAAA,EAAcD,CAAA,GAAe,UAAAX,CAAA;QAAK,OAAIW,CAAA,CAAaV,CAAA,EAAMD,CAAA;MAAA,SAAS;IAAA,EACpE;EAAA;ECHO8B,CAAA,GAAc9B,CAAA,CAnBI,UAAHA,CAAA;IAAA,IACxBC,CAAA,GAAID,CAAA,CAAJ+B,IAAA;MACU5B,CAAA,GAAaH,CAAA,CAAvBI,QAAA;MACAC,CAAA,GAASL,CAAA,CAATgC,SAAA;IAAS,OAETnB,CAAA,CAACC,CAAA,CAASmB,IAAA,EAAI;MACV,eAAqB,UAAAhC,CAAA,CAAKe,EAAA;MAC1BW,MAAA,EAAQxB,CAAA,CAAcqB,KAAA;MACtBU,KAAA,EAAO;QAAEC,YAAA,EAAc9B;MAAA;MACvBoB,WAAA,EAAaxB,CAAA,CAAKmC,SAAA;MAClBC,aAAA,EAAc;MACdR,OAAA,EAAS1B,CAAA,CAAc0B,OAAA;MACvBS,EAAA,EAAInC,CAAA,CAAcmC,EAAA;MAClBC,EAAA,EAAIpC,CAAA,CAAcoC,EAAA;MAClBC,EAAA,EAAIrC,CAAA,CAAcqC,EAAA;MAClBC,EAAA,EAAItC,CAAA,CAAcsC;IAAA,EACpB;EAAA;ECbOC,CAAA,GAWT;IACAC,MAAA,EAAQ,CAAC,SAAS,SAAS;IAE3BC,YAAA,EAAc;IACdC,iBAAA,EAAmB;IACnBC,WAAA,EAAa;IACbC,WAAA,EAAa;IACbC,WAAA,EAAa;IACbC,UAAA,EAAY;IAEZC,QAAA,EAAU;IACVC,cAAA,EAAgB;IAChBC,gBAAA,EAAkB;IAClBC,SAAA,EAAW;IACXC,eAAA,EAAiB;IACjBC,eAAA,EAAiB;MAAEC,IAAA,EAAM;IAAA;IAEzBC,aAAA,EAAe;IACfC,SAAA,EAAW;MAAEF,IAAA,EAAM;IAAA;IAEnBG,aAAA,GAAe;IACfC,oBAAA,EAAsB;IACtBC,WAAA,ECrC8B,SAAAA,CAAH7D,CAAA;MAAA,IAA8BC,CAAA,GAAID,CAAA,CAAJE,IAAA;MAAI,OAC7DW,CAAA,CAACM,CAAA,EAAY;QAACH,EAAA,EAAIf,CAAA,CAAKe,EAAA;QAAI8C,UAAA,GAAY;QAAMtC,KAAA,EAAOvB,CAAA,CAAKuB;MAAA,EAAS;IAAA;IDsClEuC,WAAA,EAAa;IAEbC,OAAA,GAAS;IACTC,YAAA,EAAc;IAEdC,IAAA,EAAM;EAAA;EAGGC,CAAA,GAAeC,CAAA,KACrB1B,CAAA,EAAkB;IACrB2B,aAAA,EAAetE,CAAA;IAGfuE,aAAA,EAAexC,CAAA;IAGfyC,aAAA,EAAe;EAAA;EAGNC,CAAA,GAAkBJ,CAAA,KACxB1B,CAAA,EAAkB;IACrB+B,UAAA,EE7D4B,SAAAA,CAC5BzE,CAAA,EACAC,CAAA;MAEAD,CAAA,CAAI0E,SAAA,GAAYzE,CAAA,CAAKuB,KAAA,EACrBxB,CAAA,CAAI2E,SAAA,IACJ3E,CAAA,CAAI4E,GAAA,CAAI3E,CAAA,CAAKkB,CAAA,EAAGlB,CAAA,CAAKmB,CAAA,EAAGnB,CAAA,CAAKqB,IAAA,GAAO,GAAG,GAAG,IAAIuD,IAAA,CAAKC,EAAA,GACnD9E,CAAA,CAAIuB,IAAA,IAEAtB,CAAA,CAAKyB,WAAA,GAAc,MACnB1B,CAAA,CAAI+E,WAAA,GAAc9E,CAAA,CAAK2B,WAAA,EACvB5B,CAAA,CAAIgF,SAAA,GAAY/E,CAAA,CAAKyB,WAAA,EACrB1B,CAAA,CAAI2B,MAAA,GAEZ;IAAA;IFgDIsD,UAAA,EG9D4B,SAAAA,CAC5BjF,CAAA,EACAC,CAAA;MAEAD,CAAA,CAAI+E,WAAA,GAAc9E,CAAA,CAAKuB,KAAA,EACvBxB,CAAA,CAAIgF,SAAA,GAAY/E,CAAA,CAAKmC,SAAA,EAErBpC,CAAA,CAAI2E,SAAA,IACJ3E,CAAA,CAAIkF,MAAA,CAAOjF,CAAA,CAAKkF,MAAA,CAAOhE,CAAA,EAAGlB,CAAA,CAAKkF,MAAA,CAAO/D,CAAA,GACtCpB,CAAA,CAAIoF,MAAA,CAAOnF,CAAA,CAAKoF,MAAA,CAAOlE,CAAA,EAAGlB,CAAA,CAAKoF,MAAA,CAAOjE,CAAA,GACtCpB,CAAA,CAAI2B,MAAA,EACR;IAAA;IHoDI2D,UAAA,EAA8B,sBAAXC,MAAA,IAAyBA,MAAA,CAAOC,gBAAA,IAAwB;EAAA;EAAAC,CAAA;EIhDzEC,CAAA,GAAiB,SAAAC,CACnB3F,CAAA;IAAwC,OAExCK,CAAA,CAAQ;MACJ,OAA2B,qBAAhBL,CAAA,GAAmCA,CAAA,GACvC;QAAA,OAAMA,CAAW;MAAA,CAC5B;IAAA,GAAG,CAACA,CAAA,EAAa;EAAA;EA6HR4F,CAAA,GAAa,SAAAC,CAAH7F,CAAA;IAwCjB,IAvCFS,CAAA,GAAMT,CAAA,CAAN8F,MAAA;MACAnF,CAAA,GAAKX,CAAA,CAAL+F,KAAA;MACAC,CAAA,GAAKhG,CAAA,CAALiG,KAAA;MAAKC,CAAA,GAAAlG,CAAA,CACL4C,YAAA;MAAAuD,CAAA,QAAY,MAAAD,CAAA,GAAGxD,CAAA,CAAmBE,YAAA,GAAYsD,CAAA;MAAAE,CAAA,GAAApG,CAAA,CAC9C6C,iBAAA;MAAAwD,CAAA,QAAiB,MAAAD,CAAA,GAAG1D,CAAA,CAAmBG,iBAAA,GAAiBuD,CAAA;MAAAE,CAAA,GAAAtG,CAAA,CACxD8C,WAAA;MAAAyD,CAAA,QAAW,MAAAD,CAAA,GAAG5D,CAAA,CAAmBI,WAAA,GAAWwD,CAAA;MAAAE,CAAA,GAAAxG,CAAA,CAC5C+C,WAAA;MAAA0D,CAAA,QAAW,MAAAD,CAAA,GAAG9D,CAAA,CAAmBK,WAAA,GAAWyD,CAAA;MAAA1F,CAAA,GAAAd,CAAA,CAC5CgD,WAAA;MAAA9B,CAAA,QAAW,MAAAJ,CAAA,GAAG4B,CAAA,CAAmBM,WAAA,GAAWlC,CAAA;MAAAM,CAAA,GAAApB,CAAA,CAC5CiD,UAAA;MAAApC,CAAA,QAAU,MAAAO,CAAA,GAAGsB,CAAA,CAAmBO,UAAA,GAAU7B,CAAA;MAAAsF,CAAA,GAAA1G,CAAA,CAC1CkD,QAAA;MAAA/B,CAAA,QAAQ,MAAAuF,CAAA,GAAGhE,CAAA,CAAmBQ,QAAA,GAAQwD,CAAA;MAAAC,CAAA,GAAA3G,CAAA,CACtCmD,cAAA;MAAAyD,CAAA,QAAc,MAAAD,CAAA,GAAGjE,CAAA,CAAmBS,cAAA,GAAcwD,CAAA;MAAAE,CAAA,GAAA7G,CAAA,CAClDoD,gBAAA;MAAA0D,CAAA,QAAgB,MAAAD,CAAA,GAAGnE,CAAA,CAAmBU,gBAAA,GAAgByD,CAAA;MAAAE,CAAA,GAAA/G,CAAA,CACtDqD,SAAA;MAAAtD,CAAA,QAAS,MAAAgH,CAAA,GAAGrE,CAAA,CAAmBW,SAAA,GAAS0D,CAAA;MAAAjF,CAAA,GAAA9B,CAAA,CACxCsD,eAAA;MAAAa,CAAA,QAAe,MAAArC,CAAA,GAAGY,CAAA,CAAmBY,eAAA,GAAexB,CAAA;MAAA0C,CAAA,GAAAxE,CAAA,CACpDuD,eAAA;MAAAqC,CAAA,QAAe,MAAApB,CAAA,GAAG9B,CAAA,CAAmBa,eAAA,GAAeiB,CAAA;MAAAwC,CAAA,GAAAhH,CAAA,CACpDyD,aAAA;MAAAwD,CAAA,QAAa,MAAAD,CAAA,GAAGtE,CAAA,CAAmBe,aAAA,GAAauD,CAAA;MAAAE,CAAA,GAAAlH,CAAA,CAChD0D,SAAA;MAAAyD,CAAA,QAAS,MAAAD,CAAA,GAAGxE,CAAA,CAAmBgB,SAAA,GAASwD,CAAA;MAAAE,CAAA,GAAApH,CAAA,CACxC2D,aAAA;MAAA0D,CAAA,QAAa,MAAAD,CAAA,GAAG1E,CAAA,CAAmBiB,aAAA,GAAayD,CAAA;MAAAE,CAAA,GAAAtH,CAAA,CAChD4D,oBAAA;MAAA2D,CAAA,QAAoB,MAAAD,CAAA,GAAG5E,CAAA,CAAmBkB,oBAAA,GAAoB0D,CAAA;MAwB9DE,CAAA,GAA4CvH,CAAA,CAAuC;MAA5EwH,CAAA,GAAcD,CAAA;MAAEE,CAAA,GAAiBF,CAAA;MACxCG,EAAA,GAA4C1H,CAAA,CAA6C;MAAlF2H,EAAA,GAAcD,EAAA;MAAEE,EAAA,GAAiBF,EAAA;MAElCG,EAAA,GAzKe,UAAH9H,CAAA;QAchB,IAbFC,CAAA,GAAYD,CAAA,CAAZ4C,YAAA;UACAzC,CAAA,GAAiBH,CAAA,CAAjB6C,iBAAA;UACAtC,CAAA,GAAWP,CAAA,CAAX8C,WAAA;UACArC,CAAA,GAAWT,CAAA,CAAX+C,WAAA;UACApC,CAAA,GAAWX,CAAA,CAAXgD,WAAA;UACAgD,CAAA,GAAMhG,CAAA,CAAN8F,MAAA;UASMI,CAAA,GAAkBR,CAAA,CAA6BzF,CAAA;UAE/C8H,CAAA,GAAU/B,CAAA,CAAO;UACjBG,CAAA,GAAUH,CAAA,CAAO;QAEvB,OAAO3F,CAAA,CAAQ;UAYX,OAAO;YAAE0B,IAAA,EAXSiG,CAAA,GACbC,QAAA,CAAS,UAAAjI,CAAA;cAAI,OAAIkG,CAAA,CAAgBlG,CAAA,CAAKkI,IAAA,CAAK;YAAA,GAC3CC,QAAA,CAAShI,CAAA;YASYiI,MAAA,EAPNC,CAAA,GACfF,QAAA,EAAU5H,CAAA,EACVwC,WAAA,CAAYtC,CAAA,EACZuC,WAAA,CAAYrC,CAAA;YAI8BmF,MAAA,EAF3BwC,CAAA,CAAYP,CAAA,EAAS5B,CAAA;UAAA,CAG7C;QAAA,GAAG,CACCD,CAAA,EACA/F,CAAA,EACAI,CAAA,EACAE,CAAA,EACAE,CAAA,EACAoH,CAAA,EACA5B,CAAA,EAER;MAAA,CA+HmB,CAA6B;QACxCvD,YAAA,EAAAuD,CAAA;QACAtD,iBAAA,EAAAwD,CAAA;QACAvD,WAAA,EAAAyD,CAAA;QACAxD,WAAA,EAAA0D,CAAA;QACAzD,WAAA,EAAA9B,CAAA;QACA4E,MAAA,EAAArF;MAAA;IAGJN,CAAA,CAAU;MAEN,IAAMH,CAAA,GAAyCW,CAAA,CAAM4H,GAAA,CAAI,UAAAvI,CAAA;UAAI,OAAK;YAC9DgB,EAAA,EAAIhB,CAAA,CAAKgB,EAAA;YACTkH,IAAA,EAAI9D,CAAA,CAAO,IAAApE,CAAA;YAEXwI,KAAA,EAAO;YACPrH,CAAA,EAAG;YACHC,CAAA,EAAG;YACHqH,EAAA,EAAI;YACJC,EAAA,EAAI;UAAA,CACP;QAAA;QACKzI,CAAA,GAA+C+F,CAAA,CAAMuC,GAAA,CAAI,UAAAtI,CAAA;UAAI,OAAK;YACpEiI,IAAA,EAAI9D,CAAA,CAAO,IAAAnE,CAAA;YAEXuI,KAAA,EAAO;YAIPrD,MAAA,EAAQnF,CAAA,CAAgB2I,IAAA,CAAK,UAAA3I,CAAA;cAAI,OAAIA,CAAA,CAAKgB,EAAA,KAAOf,CAAA,CAAKkF,MAAA;YAAA;YACtDE,MAAA,EAAQrF,CAAA,CAAgB2I,IAAA,CAAK,UAAA3I,CAAA;cAAI,OAAIA,CAAA,CAAKgB,EAAA,KAAOf,CAAA,CAAKoF,MAAM;YAAA;UAAA,CAC/D;QAAA;QAEKlF,CAAA,GAAayI,CAAA,CAAgB5I,CAAA,EAC9B6I,KAAA,CAAM,QAAQf,EAAA,CAAO/F,IAAA,CAAKkE,KAAA,CAAMhG,CAAA,GAChC4I,KAAA,CAAM,UAAUf,EAAA,CAAOM,MAAA,EACvBS,KAAA,CAAM,UAAUf,EAAA,CAAOhC,MAAA,EACvBgD,IAAA;MAQL,OALA3I,CAAA,CAAW4I,IAAA,CAAKlI,CAAA,GAEhB6G,CAAA,CAAkB1H,CAAA,GAClB6H,EAAA,CAAkB5H,CAAA,GAEX;QACHE,CAAA,CAAW2I,IAAA;MAAA,CAEnB;IAAA,GAAG,CAACnI,CAAA,EAAOqF,CAAA,EAAO8B,EAAA,EAAQjH,CAAA,EAAY6G,CAAA,EAAmBG,EAAA;IAEzD,IAAAmB,EAAA,GAA0C/I,CAAA,CAAmBsH,CAAA;MAAtD0B,EAAA,GAAaD,EAAA;MAAEE,EAAA,GAAgBF,EAAA;MAEhCG,EAAA,GAhLW,UAAHnJ,CAAA;QAkBZ,IAjBFC,CAAA,GAAID,CAAA,CAAJsB,IAAA;UACAnB,CAAA,GAAUH,CAAA,CAAVoJ,UAAA;UACA/I,CAAA,GAAYL,CAAA,CAAZqJ,YAAA;UACA5I,CAAA,GAAKT,CAAA,CAALwB,KAAA;UACAb,CAAA,GAAWX,CAAA,CAAX0B,WAAA;UACAsE,CAAA,GAAWhG,CAAA,CAAX4B,WAAA;UACAsE,CAAA,GAAalG,CAAA,CAAb2D,aAAA;UACAwC,CAAA,GAAanG,CAAA,CAAbsJ,aAAA;UAWMlD,CAAA,GAAQ2B,CAAA;UAER1B,CAAA,GAAUX,CAAA,CAAezF,CAAA;UACzBqG,CAAA,GAAWZ,CAAA,CAAejF,CAAA;UAC1B8F,CAAA,GAAiBb,CAAA,CAAe/E,CAAA;UAChC6F,CAAA,GAAiB+C,CAAA,CAAkBvD,CAAA,EAAaI,CAAA;UAChDK,CAAA,GAAiBlG,CAAA,CACnB,UAACP,CAAA;YACG,IAAMC,CAAA,GAAQqG,CAAA,CAAStG,CAAA,CAAKkI,IAAA;YAE5B,OAAO;cACH5G,IAAA,EAAM+E,CAAA,CAAQrG,CAAA,CAAKkI,IAAA;cACnB1G,KAAA,EAAAvB,CAAA;cACAyB,WAAA,EAAa6E,CAAA,CAAevG,CAAA,CAAKkI,IAAA;cACjCtG,WAAA,EAAa4E,CAAA,CAAcpC,CAAA,KAAMpE,CAAA,EAAI;gBAAEwB,KAAA,EAAAvB;cAAA;YAAA,CAE9C;UAAA,GACD,CAACoG,CAAA,EAASC,CAAA,EAAUC,CAAA,EAAgBC,CAAA;UAGlC1F,CAAA,GAAgB4E,CAAA,CAAevF,CAAA;UAC/Be,CAAA,GAAiBX,CAAA,CACnB,UAACP,CAAA;YACG,IAAMC,CAAA,GAAQqG,CAAA,CAAStG,CAAA,CAAKkI,IAAA;YAE5B,OAAO;cACH5G,IAAA,EAAMR,CAAA,CAAcd,CAAA,CAAKkI,IAAA;cACzB1G,KAAA,EAAAvB,CAAA;cACAyB,WAAA,EAAa6E,CAAA,CAAevG,CAAA,CAAKkI,IAAA;cACjCtG,WAAA,EAAa4E,CAAA,CAAcpC,CAAA,KAAMpE,CAAA,EAAI;gBAAEwB,KAAA,EAAAvB;cAAA;YAAA,CAE9C;UAAA,GACD,CAACa,CAAA,EAAewF,CAAA,EAAUC,CAAA,EAAgBC,CAAA;UAGxCpF,CAAA,GAAkBsE,CAAA,CAAerF,CAAA;UACjCQ,CAAA,GAAmBN,CAAA,CACrB,UAACP,CAAA;YACG,IAAMC,CAAA,GAAQqG,CAAA,CAAStG,CAAA,CAAKkI,IAAA;YAE5B,OAAO;cACH5G,IAAA,EAAMF,CAAA,CAAgBpB,CAAA,CAAKkI,IAAA;cAC3B1G,KAAA,EAAAvB,CAAA;cACAyB,WAAA,EAAa6E,CAAA,CAAevG,CAAA,CAAKkI,IAAA;cACjCtG,WAAA,EAAa4E,CAAA,CAAcpC,CAAA,KAAMpE,CAAA,EAAI;gBAAEwB,KAAA,EAAAvB;cAAA;YAAA,CAE9C;UAAA,GACD,CAACmB,CAAA,EAAiBkF,CAAA,EAAUC,CAAA,EAAgBC,CAAA;QAGhD,OAAOjG,CAAA,CACH,UAACP,CAAA;UACG,OAAKkG,CAAA,IAA0C,MAAzBC,CAAA,CAAcqD,MAAA,GAChCrD,CAAA,CAAcsD,QAAA,CAASzJ,CAAA,CAAKgB,EAAA,IAAYE,CAAA,CAAelB,CAAA,IACpDa,CAAA,CAAiBb,CAAA,IAFiCyG,CAAA,CAAezG,CAAA,CAG5E;QAAA,GACA,CAACyG,CAAA,EAAgBvF,CAAA,EAAgBL,CAAA,EAAkBqF,CAAA,EAAeC,CAAA,EAE1E;MAAA,CAmGyB,CAAyB;QAC1C7E,IAAA,EAAMH,CAAA;QACNiI,UAAA,EAAYxC,CAAA;QACZyC,YAAA,EAAcvC,CAAA;QACdtF,KAAA,EAAOzB,CAAA;QACP2B,WAAA,EAAayC,CAAA;QACbvC,WAAA,EAAagE,CAAA;QACbjC,aAAA,EAAA0D,CAAA;QACAiC,aAAA,EAAAL;MAAA;MAEES,EAAA,GAA6CrJ,CAAA,CAAQ;QACvD,OAAuB,SAAnBoH,CAAA,GAAgC,OAE7BA,CAAA,CAAec,GAAA,CAAI,UAAAvI,CAAA;UAAI,OAAAoE,CAAA,CACvB,IAAApE,CAAA,EACAmJ,EAAA,CAAanJ,CAAA,EAAK;QAAA,EAE7B;MAAA,GAAG,CAACyH,CAAA,EAAgB0B,EAAA;MAEdQ,EAAA,GAAQ5B,CAAA;MACR6B,EAAA,GAAmBlE,CAAA,CAAeuB,CAAA;MAClC4C,EAAA,GAAeN,CAAA,CAAkBpC,CAAA,EAAWwC,EAAA;MAE5CG,EAAA,GAAmDzJ,CAAA,CAAQ;QAC7D,OAAuB,SAAnBuH,EAAA,IAA6C,SAAlB8B,EAAA,GAA+B,OAEvD9B,EAAA,CAAeW,GAAA,CAAI,UAAAvI,CAAA;UAAwB,IAArBC,CAAA,GAAKD,CAAA,CAALwI,KAAA;YAAUrI,CAAA,GAAI4J,CAAA,CAAA/J,CAAA,EAAAyF,CAAA;YACjCpF,CAAA,GAA+E;cACjFW,EAAA,EAAOb,CAAA,CAAKgF,MAAA,CAAOnE,EAAA,GAAE,MAAIb,CAAA,CAAKkF,MAAA,CAAOrE,EAAA;cACrCkH,IAAA,EAAM/H,CAAA,CAAK+H,IAAA;cACXM,KAAA,EAAAvI,CAAA;cACAkF,MAAA,EAAQuE,EAAA,CAAcf,IAAA,CAAK,UAAA3I,CAAA;gBAAI,OAAIA,CAAA,CAAKgB,EAAA,KAAOb,CAAA,CAAKgF,MAAA,CAAOnE,EAAA;cAAA;cAC3DqE,MAAA,EAAQqE,EAAA,CAAcf,IAAA,CAAK,UAAA3I,CAAA;gBAAI,OAAIA,CAAA,CAAKgB,EAAA,KAAOb,CAAA,CAAKkF,MAAA,CAAOrE,EAAE;cAAA;YAAA;UAGjE,OAAAoD,CAAA,KACO/D,CAAA,EAAqB;YACxB+B,SAAA,EAAWwH,EAAA,CAAiBvJ,CAAA;YAC5BmB,KAAA,EAAOqI,EAAA,CAAaxJ,CAAA;UAAA,EAE5B;QAAA,EACH;MAAA,GAAE,CAACuH,EAAA,EAAgB8B,EAAA,EAAeE,EAAA,EAAkBC,EAAA;IAErD,OAAO;MACH9D,KAAA,EAAO2D,EAAA;MACPzD,KAAA,EAAO6D,EAAA;MACPR,aAAA,EAAAL,EAAA;MACAe,gBAAA,EAAAd;IAAA,CAER;EAAA;EAEMlC,CAAA,GAA4B,SAAAiD,CAAyBjK,CAAA;IAAwB,OAAM;MACrFmB,CAAA,EAAGnB,CAAA,CAAKmB,CAAA;MACRC,CAAA,EAAGpB,CAAA,CAAKoB;IAAA,CACX;EAAA;EAEK6F,CAAA,GAA8B,SAAAiD,CAAyBlK,CAAA;IAAwB,OAAM;MACvFsB,IAAA,EAAMtB,CAAA,CAAKsB,IAAA;MACX6I,KAAA,EAAOnK,CAAA,CAAKsB,IAAA;MACZ8I,MAAA,EAAQpK,CAAA,CAAKsB;IAAA,CAChB;EAAA;EAEY4F,CAAA,GAAqB,SAAAmD,CAC9BrK,CAAA,EACAC,CAAA;IAAoD,OAEpD2G,CAAA,CAAmC;MAC/BsB,IAAA,EAAMlI,CAAA;MACN+D,WAAA,EAAA9D,CAAA;MACAqK,WAAA,EAAatD,CAAA;MACbuD,aAAA,EAAetD;IAAA,EACjB;EAAA;EC3ROE,CAAA,GAAe,SAAAqD,CAAHxK,CAAA;IAIY,IAHjCC,CAAA,GAAKD,CAAA,CAALiG,KAAA;MACA9F,CAAA,GAAaH,CAAA,CAAbsE,aAAA;MACA/D,CAAA,GAASP,CAAA,CAATgC,SAAA;MAEArB,CAAA,GAA0CwF,CAAA;MAAlCH,CAAA,GAAOrF,CAAA,CAAPqD,OAAA;MAAiBkC,CAAA,GAAYvF,CAAA,CAApB8J,MAAA;MAEjB1C,CAAA,GAA6C1H,CAAA,CACzC;QAAA,OAAM,CA5BV,UAACL,CAAA;UAA8B,OAAM;YACjCsC,EAAA,EAAItC,CAAA,CAAKmF,MAAA,CAAOhE,CAAA;YAChBoB,EAAA,EAAIvC,CAAA,CAAKmF,MAAA,CAAO/D,CAAA;YAChBoB,EAAA,EAAIxC,CAAA,CAAKmF,MAAA,CAAOhE,CAAA;YAChBsB,EAAA,EAAIzC,CAAA,CAAKmF,MAAA,CAAO/D,CAAA;YAChBI,KAAA,EAAOxB,CAAA,CAAKwB,KAAA;YACZK,OAAA,EAAS;UAAA;QAAA,GAKb,UAAC7B,CAAA;UAA8B,OAAM;YACjCsC,EAAA,EAAItC,CAAA,CAAKmF,MAAA,CAAOhE,CAAA;YAChBoB,EAAA,EAAIvC,CAAA,CAAKmF,MAAA,CAAO/D,CAAA;YAChBoB,EAAA,EAAIxC,CAAA,CAAKqF,MAAA,CAAOlE,CAAA;YAChBsB,EAAA,EAAIzC,CAAA,CAAKqF,MAAA,CAAOjE,CAAA;YAChBI,KAAA,EAAOxB,CAAA,CAAKwB,KAAA;YACZK,OAAA,EAAS;UAAA;QAAA,EAWmE;MAAA,GAC5E;MAFGuE,CAAA,GAAe2B,CAAA;MAAE1B,CAAA,GAAiB0B,CAAA;MAKnCzB,CAAA,GAAalF,CAAA,CAUjBnB,CAAA,EAAO;QACLyK,IAAA,EAAM,SAAAA,CAAA1K,CAAA;UAAI,OAAIA,CAAA,CAAKgB,EAAE;QAAA;QACrB2J,OAAA,EAAStE,CAAA;QACT7C,IAAA,EAAM4C,CAAA;QACNwE,KAAA,EAAOvE,CAAA;QACPwE,MAAA,EAAQxE,CAAA;QACRyE,OAAA,GAAS;QACTL,MAAA,EAAQvE,CAAA;QACR6E,SAAA,GAAY/E;MAAA;IAGhB,OACInF,CAAA,CAAA6F,CAAA;MAAAsE,QAAA,EACK1E,CAAA,CAAW,UAACtG,CAAA,EAAiBC,CAAA;QAC1B,OAAOQ,CAAA,CAAcN,CAAA,EAAe;UAChC8K,GAAA,EAAKhL,CAAA,CAAKe,EAAA;UACVe,IAAA,EAAA9B,CAAA;UACAG,QAAA,EAAUJ,CAAA;UACVgC,SAAA,EAAAzB;QAAA;MAAA;IAAA,EAKpB;EAAA;ECrBa6G,CAAA,GAAe,SAAA8D,CAAHlL,CAAA;IAUY,IATjCC,CAAA,GAAKD,CAAA,CAAL+F,KAAA;MACA5F,CAAA,GAAaH,CAAA,CAAbqE,aAAA;MACA1D,CAAA,GAAYX,CAAA,CAAZQ,YAAA;MACAwF,CAAA,GAAWhG,CAAA,CAAXU,WAAA;MACAwF,CAAA,GAAYlG,CAAA,CAAZY,YAAA;MACAmH,CAAA,GAAO/H,CAAA,CAAPM,OAAA;MACA8F,CAAA,GAAOpG,CAAA,CAAPmL,OAAA;MACA9E,CAAA,GAAgBrG,CAAA,CAAhBgK,gBAAA;MACA1D,CAAA,GAAatG,CAAA,CAAb2D,aAAA;MAEA4C,CAAA,GAA0CJ,CAAA;MAAlCK,CAAA,GAAOD,CAAA,CAAPvC,OAAA;MAAiByC,CAAA,GAAYF,CAAA,CAApBkE,MAAA;MAEjB3J,CAAA,GAA6DT,CAAA,CACzD;QAAA,OAAM,CAnDV,UAACL,CAAA;UAAwB,OAAM;YAC3BmB,CAAA,EAAGnB,CAAA,CAAKmB,CAAA;YACRC,CAAA,EAAGpB,CAAA,CAAKoB,CAAA;YACRE,IAAA,EAAMtB,CAAA,CAAKsB,IAAA;YACXE,KAAA,EAAOxB,CAAA,CAAKwB,KAAA;YACZE,WAAA,EAAa1B,CAAA,CAAK0B,WAAA;YAClBE,WAAA,EAAa5B,CAAA,CAAK4B,WAAA;YAClBP,KAAA,EAAO;YACPQ,OAAA,EAAS;UAAA;QAAA,GAKb,UAAC7B,CAAA;UAAqB,OAAM;YACxBmB,CAAA,EAAGnB,CAAA,CAAKmB,CAAA;YACRC,CAAA,EAAGpB,CAAA,CAAKoB,CAAA;YACRE,IAAA,EAAMtB,CAAA,CAAKsB,IAAA;YACXE,KAAA,EAAOxB,CAAA,CAAKwB,KAAA;YACZE,WAAA,EAAa1B,CAAA,CAAK0B,WAAA;YAClBE,WAAA,EAAa5B,CAAA,CAAK4B,WAAA;YAClBP,KAAA,EAAO;YACPQ,OAAA,EAAS;UAAA;QAAA,GAKb,UAAC7B,CAAA;UAAwB,OAAM;YAC3BmB,CAAA,EAAGnB,CAAA,CAAKmB,CAAA;YACRC,CAAA,EAAGpB,CAAA,CAAKoB,CAAA;YACRE,IAAA,EAAMtB,CAAA,CAAKsB,IAAA;YACXE,KAAA,EAAOxB,CAAA,CAAKwB,KAAA;YACZE,WAAA,EAAa1B,CAAA,CAAK0B,WAAA;YAClBE,WAAA,EAAa5B,CAAA,CAAK4B,WAAA;YAClBP,KAAA,EAAO;YACPQ,OAAA,EAAS;UAAA;QAAA,EAiBkF;MAAA,GAC3F;MAFGX,CAAA,GAAeJ,CAAA;MAAEK,CAAA,GAAiBL,CAAA;MAAE8H,CAAA,GAAc9H,CAAA;MAKnDkH,CAAA,GAAa5G,CAAA,CAAqDnB,CAAA,EAAO;QAC3EyK,IAAA,EAAM,SAAAA,CAAA1K,CAAA;UAAI,OAAIA,CAAA,CAAKgB,EAAE;QAAA;QACrB2J,OAAA,EAASxJ,CAAA;QACTqC,IAAA,EAAMtC,CAAA;QACN0J,KAAA,EAAOzJ,CAAA;QACP0J,MAAA,EAAQ1J,CAAA;QACRiK,KAAA,EAAOxC,CAAA;QACP6B,MAAA,EAAQhE,CAAA;QACRsE,SAAA,GAAYvE;MAAA;MAGhB6B,CAAA,GAA8C1B,CAAA;MAAtC2B,CAAA,GAAoBD,CAAA,CAApBgD,oBAAA;MAAsB9B,CAAA,GAAWlB,CAAA,CAAXiD,WAAA;MAExB1E,CAAA,GAAmBrG,CAAA,CACrB,UAACP,CAAA,EAA0BC,CAAA;QACvBqI,CAAA,CAAqB7H,CAAA,CAAc2F,CAAA,EAAS;UAAElG,IAAA,EAAAF;QAAA,IAASC,CAAA,GACvDoG,CAAA,CAAiB,CAACrG,CAAA,CAAKgB,EAAA,YACvBL,CAAA,IAAAA,CAAA,CAAeX,CAAA,EAAMC,CAAA,CACxB;MAAA,GACD,CAACqI,CAAA,EAAsBlC,CAAA,EAASC,CAAA,EAAkB1F,CAAA;MAGhDkG,CAAA,GAAkBtG,CAAA,CACpB,UAACP,CAAA,EAA0BC,CAAA;QACvBqI,CAAA,CAAqB7H,CAAA,CAAc2F,CAAA,EAAS;UAAElG,IAAA,EAAAF;QAAA,IAASC,CAAA,WACvD+F,CAAA,IAAAA,CAAA,CAAchG,CAAA,EAAMC,CAAA,CACvB;MAAA,GACD,CAACqI,CAAA,EAAsBlC,CAAA,EAASJ,CAAA;MAG9Bc,CAAA,GAAmBvG,CAAA,CACrB,UAACP,CAAA,EAA0BC,CAAA;QACvBsJ,CAAA,IACAlD,CAAA,CAAiB,aACjBH,CAAA,IAAAA,CAAA,CAAelG,CAAA,EAAMC,CAAA,CACxB;MAAA,GACD,CAACsJ,CAAA,EAAalD,CAAA,EAAkBH,CAAA;IAGpC,OACIrF,CAAA,CAAA6F,CAAA;MAAAsE,QAAA,EACKhD,CAAA,CAAW,UAAChI,CAAA,EAAiBC,CAAA;QAAI,OAC9BQ,CAAA,CAAcN,CAAA,EAAe;UACzB8K,GAAA,EAAKhL,CAAA,CAAKe,EAAA;UACVd,IAAA,EAAAD,CAAA;UACAG,QAAA,EAAUJ,CAAA;UACVQ,YAAA,EAAc8F,CAAA,GAAgBM,CAAA,QAAmB;UACjDlG,WAAA,EAAa4F,CAAA,GAAgBO,CAAA,QAAkB;UAC/CjG,YAAA,EAAc0F,CAAA,GAAgBQ,CAAA,QAAmB;UACjDxG,OAAA,EAASgG,CAAA,GAAgByB,CAAA,QAAU;QAAA;MAAA;IAAA,EAKvD;EAAA;ECxHaV,CAAA,GAAyB,SAAAkE,CAAHvL,CAAA;IAGY,IAF3CC,CAAA,GAAKD,CAAA,CAAL+F,KAAA;MACA5F,CAAA,GAAWH,CAAA,CAAX+D,WAAA;MAEM1D,CAAA,GAAmB6G,CAAA,CAAyBjH,CAAA,EAAOE,CAAA;IAEzD,OACIU,CAAA,CAAA6F,CAAA;MAAAsE,QAAA,EACK3K,CAAA,CAAiBkI,GAAA,CAAI,UAACvI,CAAA,EAAYC,CAAA;QAAC,OAChCY,CAAA,CAACgG,CAAA,EAAUzC,CAAA,CAAa,IAAApE,CAAA,GAAPC,CAAA;MAAA;IAAA,EAIjC;EAAA;EAAAqH,CAAA;ECDMC,CAAA,GAAe,SAAAiE,CAAHxL,CAAA;IAiDmB,IAhDjCC,CAAA,GAAKD,CAAA,CAALmK,KAAA;MACAhK,CAAA,GAAMH,CAAA,CAANoK,MAAA;MACQ7J,CAAA,GAAaP,CAAA,CAArByL,MAAA;MAAMzF,CAAA,GAAAhG,CAAA,CAENkI,IAAA;MAAehC,CAAA,GAAQF,CAAA,CAAfD,KAAA;MAAwBgC,CAAA,GAAQ/B,CAAA,CAAfC,KAAA;MAAKE,CAAA,GAAAnG,CAAA,CAE9B4C,YAAA;MAAAwD,CAAA,QAAY,MAAAD,CAAA,GAAGhC,CAAA,CAAgBvB,YAAA,GAAYuD,CAAA;MAAAI,CAAA,GAAAvG,CAAA,CAC3C6C,iBAAA;MAAA2D,CAAA,QAAiB,MAAAD,CAAA,GAAGpC,CAAA,CAAgBtB,iBAAA,GAAiB0D,CAAA;MAAAE,CAAA,GAAAzG,CAAA,CACrD8C,WAAA;MAAAhC,CAAA,QAAW,MAAA2F,CAAA,GAAGtC,CAAA,CAAgBrB,WAAA,GAAW2D,CAAA;MAAAvF,CAAA,GAAAlB,CAAA,CACzC+C,WAAA;MAAA3B,CAAA,QAAW,MAAAF,CAAA,GAAGiD,CAAA,CAAgBpB,WAAA,GAAW7B,CAAA;MAAAwF,CAAA,GAAA1G,CAAA,CACzCgD,WAAA;MAAA7B,CAAA,QAAW,MAAAuF,CAAA,GAAGvC,CAAA,CAAgBnB,WAAA,GAAW0D,CAAA;MAAAC,CAAA,GAAA3G,CAAA,CACzCiD,UAAA;MAAA2F,CAAA,QAAU,MAAAjC,CAAA,GAAGxC,CAAA,CAAgBlB,UAAA,GAAU0D,CAAA;MAAAqB,CAAA,GAAAhI,CAAA,CAEvC2C,MAAA;MAAA0F,CAAA,QAAM,MAAAL,CAAA,GAAG7D,CAAA,CAAgBxB,MAAA,GAAMqF,CAAA;MAAAM,CAAA,GAAAtI,CAAA,CAE/BqE,aAAA;MAAAkF,CAAA,QAAa,MAAAjB,CAAA,GAAGnE,CAAA,CAAgBE,aAAA,GAAaiE,CAAA;MAAA1B,CAAA,GAAA5G,CAAA,CAG7CkD,QAAA;MAAA2D,CAAA,QAAQ,MAAAD,CAAA,GAAGzC,CAAA,CAAgBjB,QAAA,GAAQ0D,CAAA;MAAAE,CAAA,GAAA9G,CAAA,CACnCmD,cAAA;MAAA4D,CAAA,QAAc,MAAAD,CAAA,GAAG3C,CAAA,CAAgBhB,cAAA,GAAc2D,CAAA;MAAA1C,CAAA,GAAApE,CAAA,CAC/CoD,gBAAA;MAAA2G,CAAA,QAAgB,MAAA3F,CAAA,GAAGD,CAAA,CAAgBf,gBAAA,GAAgBgB,CAAA;MAAArE,CAAA,GAAAC,CAAA,CACnDqD,SAAA;MAAAvB,CAAA,QAAS,MAAA/B,CAAA,GAAGoE,CAAA,CAAgBd,SAAA,GAAStD,CAAA;MAAA2C,CAAA,GAAA1C,CAAA,CACrCsD,eAAA;MAAAkB,CAAA,QAAe,MAAA9B,CAAA,GAAGyB,CAAA,CAAgBb,eAAA,GAAeZ,CAAA;MAAA+C,CAAA,GAAAzF,CAAA,CACjDuD,eAAA;MAAAmC,CAAA,QAAe,MAAAD,CAAA,GAAGtB,CAAA,CAAgBZ,eAAA,GAAekC,CAAA;MAAAuB,CAAA,GAAAhH,CAAA,CAEjDsE,aAAA;MAAA2C,CAAA,QAAa,MAAAD,CAAA,GAAG7C,CAAA,CAAgBG,aAAA,GAAa0C,CAAA;MAAAE,CAAA,GAAAlH,CAAA,CAG7CyD,aAAA;MAAA6D,CAAA,QAAa,MAAAJ,CAAA,GAAG/C,CAAA,CAAgBV,aAAA,GAAayD,CAAA;MAAAK,CAAA,GAAAvH,CAAA,CAC7C0D,SAAA;MAAA8D,CAAA,QAAS,MAAAD,CAAA,GAAGpD,CAAA,CAAgBT,SAAA,GAAS6D,CAAA;MAAAE,CAAA,GAAAzH,CAAA,CACrCuE,aAAA;MAAAmD,CAAA,QAAa,MAAAD,CAAA,GAAGtD,CAAA,CAAgBI,aAAA,GAAakD,CAAA;MAAAE,EAAA,GAAA3H,CAAA,CAE7C+D,WAAA;MAAA6D,EAAA,QAAW,MAAAD,EAAA,GAAGxD,CAAA,CAAgBJ,WAAA,GAAW4D,EAAA;MAAAE,EAAA,GAAA7H,CAAA,CAIzC2D,aAAA;MAAAmE,EAAA,QAAa,MAAAD,EAAA,GAAG1D,CAAA,CAAgBR,aAAA,GAAakE,EAAA;MAAAmB,EAAA,GAAAhJ,CAAA,CAC7C4D,oBAAA;MAAAqF,EAAA,QAAoB,MAAAD,EAAA,GAAG7E,CAAA,CAAgBP,oBAAA,GAAoBoF,EAAA;MAAAE,EAAA,GAAAlJ,CAAA,CAC3D6D,WAAA;MAAAsF,EAAA,QAAW,MAAAD,EAAA,GAAG/E,CAAA,CAAgBN,WAAA,GAAWqF,EAAA;MACzCQ,EAAA,GAAY1J,CAAA,CAAZQ,YAAA;MACAmJ,EAAA,GAAW3J,CAAA,CAAXU,WAAA;MACAkJ,EAAA,GAAY5J,CAAA,CAAZY,YAAA;MACAiJ,EAAA,GAAO7J,CAAA,CAAPM,OAAA;MAAOwJ,EAAA,GAAA9J,CAAA,CAEPkE,IAAA;MAAAwH,EAAA,QAAI,MAAA5B,EAAA,GAAG3F,CAAA,CAAgBD,IAAA,GAAI4F,EAAA;MAC3B6B,EAAA,GAAS3L,CAAA,CAAT4L,SAAA;MACAC,EAAA,GAAc7L,CAAA,CAAd8L,cAAA;MACAC,EAAA,GAAe/L,CAAA,CAAfgM,eAAA;MAEAC,EAAA,GAAqE5F,CAAA,CACjEpG,CAAA,EACAE,CAAA,EACAI,CAAA;MAHI2L,EAAA,GAAMD,EAAA,CAANR,MAAA;MAAQU,EAAA,GAAUF,EAAA,CAAVG,UAAA;MAAYC,EAAA,GAAWJ,EAAA,CAAXK,WAAA;MAAaC,EAAA,GAAUN,EAAA,CAAVO,UAAA;MAAYC,EAAA,GAAWR,EAAA,CAAXS,WAAA;MAMrDC,EAAA,GAA0D/G,CAAA,CAAuB;QAC7EE,MAAA,EAAQ,CAACqG,EAAA,GAAa,GAAGE,EAAA,GAAc;QACvCtG,KAAA,EAAOG,CAAA;QACPD,KAAA,EAAO8B,CAAA;QACPnF,YAAA,EAAAwD,CAAA;QACAvD,iBAAA,EAAA2D,CAAA;QACA1D,WAAA,EAAAhC,CAAA;QACAiC,WAAA,EAAA3B,CAAA;QACA4B,WAAA,EAAA7B,CAAA;QACA8B,UAAA,EAAA2F,CAAA;QACA1F,QAAA,EAAA2D,CAAA;QACA1D,cAAA,EAAA4D,CAAA;QACA3D,gBAAA,EAAA2G,CAAA;QACA1G,SAAA,EAAAvB,CAAA;QACAwB,eAAA,EAAAkB,CAAA;QACAjB,eAAA,EAAAmC,CAAA;QACAjC,aAAA,EAAA6D,CAAA;QACA5D,SAAA,EAAA8D,CAAA;QACA7D,aAAA,EAAAmE,EAAA;QACAlE,oBAAA,EAAAqF;MAAA;MAnBI2D,EAAA,GAAKD,EAAA,CAAL5G,KAAA;MAAO8G,EAAA,GAAKF,EAAA,CAAL1G,KAAA;MAAO6G,EAAA,GAAaH,EAAA,CAAbrD,aAAA;MAAeyD,EAAA,GAAgBJ,EAAA,CAAhB3C,gBAAA;MAsB/BgD,EAAA,GAAwC;QAC1C/G,KAAA,EAAO;QACPF,KAAA,EAAO;QACPhC,WAAA,EAAa;MAAA;IAGbsE,CAAA,CAAOoB,QAAA,CAAS,YAAsB,SAAVoD,EAAA,KAC5BG,EAAA,CAAU/G,KAAA,GACNpF,CAAA,CAACsG,CAAA,EAAY;MAETlB,KAAA,EAAO4G,EAAA;MACPvI,aAAA,EAAe2C,CAAA;MACfjF,SAAA,EAAW0F;IAAA,GAHP,WAQZW,CAAA,CAAOoB,QAAA,CAAS,YAAsB,SAAVmD,EAAA,KAC5BI,EAAA,CAAUjH,KAAA,GACNlF,CAAA,CAACuG,CAAA,EAAY;MAETrB,KAAA,EAAO6G,EAAA;MACPvI,aAAA,EAAekF,CAAA;MACf/I,YAAA,EAAckJ,EAAA;MACdhJ,WAAA,EAAaiJ,EAAA;MACb/I,YAAA,EAAcgJ,EAAA;MACdtJ,OAAA,EAASuJ,EAAA;MACTsB,OAAA,EAAShC,EAAA;MACTa,gBAAA,EAAkB+C,EAAA;MAClBpJ,aAAA,EAAemE;IAAA,GATX,WAcZO,CAAA,CAAOoB,QAAA,CAAS,kBAA4B,SAAVmD,EAAA,KAClCI,EAAA,CAAUjJ,WAAA,GACNlD,CAAA,CAACwG,CAAA,EAAsB;MAEnBtB,KAAA,EAAO6G,EAAA;MACP7I,WAAA,EAAa6D;IAAA,GAFT;IAOhB,IAAMqF,EAAA,GAAiD5M,CAAA,CACnD;MAAA,OAAO;QACH0F,KAAA,EAAO6G,EAAA,IAAS;QAChB3G,KAAA,EAAO4G,EAAA,IAAS;QAChBvD,aAAA,EAAAwD,EAAA;QACA9C,gBAAA,EAAA+C;MAAA,CACF;IAAA,GACF,CAACH,EAAA,EAAOC,EAAA,EAAOC,EAAA,EAAeC,EAAA;IAGlC,OACIlM,CAAA,CAACyF,CAAA,EAAU;MACP6D,KAAA,EAAOoC,EAAA;MACPnC,MAAA,EAAQqC,EAAA;MACRhB,MAAA,EAAQS,EAAA;MACRhI,IAAA,EAAMwH,EAAA;MACNE,SAAA,EAAWD,EAAA;MACXG,cAAA,EAAgBD,EAAA;MAChBG,eAAA,EAAiBD,EAAA;MAAgBf,QAAA,EAEhC3C,CAAA,CAAOE,GAAA,CAAI,UAACvI,CAAA,EAAOC,CAAA;QAAM,IAAAE,CAAA;QACtB,OAAqB,qBAAVH,CAAA,GACAa,CAAA,CAACF,CAAA,EAAQ;UAAAqK,QAAA,EAAUvK,CAAA,CAAcT,CAAA,EAAOiN,EAAA;QAAA,GAAzBhN,CAAA,IAGD,SAAzBE,CAAA,GAAO,QAAA6M,EAAA,YAAAA,EAAA,CAAYhN,CAAA,KAAMG,CAAA,GAAI;MAAA;IAAA,EAI7C;EAAA;EAEaqH,CAAA,GAAU,SAAA0F,CAAHlN,CAAA;IAAA,IAAAC,CAAA,GAAAD,CAAA,CAChB2D,aAAA;MAAAxD,CAAA,QAAa,MAAAF,CAAA,GAAGkE,CAAA,CAAgBR,aAAA,GAAa1D,CAAA;MAAAI,CAAA,GAAAL,CAAA,CAC7CgE,OAAA;MAAAzD,CAAA,QAAO,MAAAF,CAAA,GAAG8D,CAAA,CAAgBH,OAAA,GAAO3D,CAAA;MAAAI,CAAA,GAAAT,CAAA,CACjCiE,YAAA;MAAAtD,CAAA,QAAY,MAAAF,CAAA,GAAG0D,CAAA,CAAgBF,YAAA,GAAYxD,CAAA;MAC3CuF,CAAA,GAAKhG,CAAA,CAALmN,KAAA;MACAjH,CAAA,GAAalG,CAAA,CAAboN,aAAA;MACGrF,CAAA,GAAUgC,CAAA,CAAA/J,CAAA,EAAAsH,CAAA;IAAA,OAEbzG,CAAA,CAACuF,CAAA,EAAS;MAEFpC,OAAA,EAAAzD,CAAA;MACAoD,aAAA,EAAAxD,CAAA;MACA8D,YAAA,EAAAtD,CAAA;MACAyM,aAAA,EAAAlH,CAAA;MACAiH,KAAA,EAAAnH,CAAA;MAAKgF,QAAA,EAGTnK,CAAA,CAAC0G,CAAA,EAAYnD,CAAA;QAAaT,aAAA,EAAexD;MAAA,GAAmB4H,CAAA;IAAA,EACpD;EAAA;EC5LHN,CAAA,GAAoB,SAAA4F,CAI7BrN,CAAA;IAA4D,OAE5Da,CAAA,CAAC0F,CAAA,EAAiB;MAAAyE,QAAA,EACb,SAAAA,CAAA/K,CAAA;QAAA,IAAGE,CAAA,GAAKF,CAAA,CAALkK,KAAA;UAAO9J,CAAA,GAAMJ,CAAA,CAANmK,MAAA;QAAM,OAAOvJ,CAAA,CAAC2G,CAAA,EAAOpD,CAAA;UAAa+F,KAAA,EAAOhK,CAAA;UAAOiK,MAAA,EAAQ/J;QAAA,GAAYL,CAAA,EAAS;MAAA;IAAA,EACxE;EAAA;EAAA0H,CAAA;ECoBlBC,EAAA,GAAqB,SAAA2F,CAAHtN,CAAA;IAsCmB,IArCvCC,CAAA,GAAKD,CAAA,CAALmK,KAAA;MACAxJ,CAAA,GAAMX,CAAA,CAANoK,MAAA;MACQpE,CAAA,GAAahG,CAAA,CAArByL,MAAA;MAAMtF,CAAA,GAAAnG,CAAA,CACNsF,UAAA;MAAAc,CAAA,QAAU,MAAAD,CAAA,GAAG3B,CAAA,CAAmBc,UAAA,GAAUa,CAAA;MAAAG,CAAA,GAAAtG,CAAA,CAE1CkI,IAAA;MAAe3B,CAAA,GAAQD,CAAA,CAAfP,KAAA;MAAwBjF,CAAA,GAAQwF,CAAA,CAAfL,KAAA;MAAK/E,CAAA,GAAAlB,CAAA,CAE9B4C,YAAA;MAAAxB,CAAA,QAAY,MAAAF,CAAA,GAAGsD,CAAA,CAAmB5B,YAAA,GAAY1B,CAAA;MAAAwF,CAAA,GAAA1G,CAAA,CAC9C6C,iBAAA;MAAA1B,CAAA,QAAiB,MAAAuF,CAAA,GAAGlC,CAAA,CAAmB3B,iBAAA,GAAiB6D,CAAA;MAAAkC,CAAA,GAAA5I,CAAA,CACxD8C,WAAA;MAAAkF,CAAA,QAAW,MAAAY,CAAA,GAAGpE,CAAA,CAAmB1B,WAAA,GAAW8F,CAAA;MAAAP,CAAA,GAAArI,CAAA,CAC5C+C,WAAA;MAAAuF,CAAA,QAAW,MAAAD,CAAA,GAAG7D,CAAA,CAAmBzB,WAAA,GAAWsF,CAAA;MAAAkB,CAAA,GAAAvJ,CAAA,CAC5CgD,WAAA;MAAA4D,CAAA,QAAW,MAAA2C,CAAA,GAAG/E,CAAA,CAAmBxB,WAAA,GAAWuG,CAAA;MAAA1C,CAAA,GAAA7G,CAAA,CAC5CiD,UAAA;MAAAmB,CAAA,QAAU,MAAAyC,CAAA,GAAGrC,CAAA,CAAmBvB,UAAA,GAAU4D,CAAA;MAAAkD,CAAA,GAAA/J,CAAA,CAE1C2C,MAAA;MAAA5C,CAAA,QAAM,MAAAgK,CAAA,GAAGvF,CAAA,CAAmB7B,MAAA,GAAMoH,CAAA;MAAAjI,CAAA,GAAA9B,CAAA,CAElCyE,UAAA;MAAA/B,CAAA,QAAU,MAAAZ,CAAA,GAAG0C,CAAA,CAAmBC,UAAA,GAAU3C,CAAA;MAAAqC,CAAA,GAAAnE,CAAA,CAC1CkD,QAAA;MAAAuC,CAAA,QAAQ,MAAAtB,CAAA,GAAGK,CAAA,CAAmBtB,QAAA,GAAQiB,CAAA;MAAAuB,CAAA,GAAA1F,CAAA,CACtCmD,cAAA;MAAA6D,CAAA,QAAc,MAAAtB,CAAA,GAAGlB,CAAA,CAAmBrB,cAAA,GAAcuC,CAAA;MAAAuB,CAAA,GAAAjH,CAAA,CAClDoD,gBAAA;MAAA+D,CAAA,QAAgB,MAAAF,CAAA,GAAGzC,CAAA,CAAmBpB,gBAAA,GAAgB6D,CAAA;MAAAG,CAAA,GAAApH,CAAA,CACtDqD,SAAA;MAAAgE,CAAA,QAAS,MAAAD,CAAA,GAAG5C,CAAA,CAAmBnB,SAAA,GAAS+D,CAAA;MAAAE,CAAA,GAAAtH,CAAA,CACxCsD,eAAA;MAAAiE,CAAA,QAAe,MAAAD,CAAA,GAAG9C,CAAA,CAAmBlB,eAAA,GAAegE,CAAA;MAAAE,CAAA,GAAAxH,CAAA,CACpDuD,eAAA;MAAAkE,CAAA,QAAe,MAAAD,CAAA,GAAGhD,CAAA,CAAmBjB,eAAA,GAAeiE,CAAA;MAAAE,CAAA,GAAA1H,CAAA,CAEpDiF,UAAA;MAAA0C,EAAA,QAAU,MAAAD,CAAA,GAAGlD,CAAA,CAAmBS,UAAA,GAAUyC,CAAA;MAAAE,EAAA,GAAA5H,CAAA,CAC1CyD,aAAA;MAAAoE,EAAA,QAAa,MAAAD,EAAA,GAAGpD,CAAA,CAAmBf,aAAA,GAAamE,EAAA;MAAAE,EAAA,GAAA9H,CAAA,CAChD0D,SAAA;MAAAsF,EAAA,QAAS,MAAAlB,EAAA,GAAGtD,CAAA,CAAmBd,SAAA,GAASoE,EAAA;MAAAmB,EAAA,GAAAjJ,CAAA,CAExC+D,WAAA;MAAAmF,EAAA,QAAW,MAAAD,EAAA,GAAGzE,CAAA,CAAmBT,WAAA,GAAWkF,EAAA;MAAAE,EAAA,GAAAnJ,CAAA,CAI5C2D,aAAA;MAAA+F,EAAA,QAAa,MAAAP,EAAA,GAAG3E,CAAA,CAAmBb,aAAA,GAAawF,EAAA;MAAAQ,EAAA,GAAA3J,CAAA,CAChD4D,oBAAA;MAAAgG,EAAA,QAAoB,MAAAD,EAAA,GAAGnF,CAAA,CAAmBZ,oBAAA,GAAoB+F,EAAA;MAAAE,EAAA,GAAA7J,CAAA,CAC9D6D,WAAA;MAAAiG,EAAA,QAAW,MAAAD,EAAA,GAAGrF,CAAA,CAAmBX,WAAA,GAAWgG,EAAA;MAC5C6B,EAAA,GAAO1L,CAAA,CAAPM,OAAA;MACAqL,EAAA,GAAS3L,CAAA,CAATuN,SAAA;MAEM1B,EAAA,GAAW3F,CAAA,CAAiC;MAClD6F,EAAA,GAAqE1F,CAAA,CACjEpG,CAAA,EACAU,CAAA,EACAqF,CAAA;MAHIiG,EAAA,GAAMF,EAAA,CAANN,MAAA;MAAQS,EAAA,GAAUH,EAAA,CAAVK,UAAA;MAAYD,EAAA,GAAWJ,EAAA,CAAXO,WAAA;MAAaD,EAAA,GAAUN,EAAA,CAAVS,UAAA;MAAYD,EAAA,GAAWR,EAAA,CAAXW,WAAA;MAMrDD,EAAA,GAA0D7G,CAAA,CAAuB;QAC7EE,MAAA,EAAQ,CAACoG,EAAA,GAAa,GAAGC,EAAA,GAAc;QACvCpG,KAAA,EAAOQ,CAAA;QACPN,KAAA,EAAOnF,CAAA;QACP8B,YAAA,EAAAxB,CAAA;QACAyB,iBAAA,EAAA1B,CAAA;QACA2B,WAAA,EAAAkF,CAAA;QACAjF,WAAA,EAAAuF,CAAA;QACAtF,WAAA,EAAA4D,CAAA;QACA3D,UAAA,EAAAmB,CAAA;QACAlB,QAAA,EAAAuC,CAAA;QACAtC,cAAA,EAAA6D,CAAA;QACA5D,gBAAA,EAAA+D,CAAA;QACA9D,SAAA,EAAAgE,CAAA;QACA/D,eAAA,EAAAiE,CAAA;QACAhE,eAAA,EAAAkE,CAAA;QACAhE,aAAA,EAAAoE,EAAA;QACAnE,SAAA,EAAAsF,EAAA;QACArF,aAAA,EAAA+F,EAAA;QACA9F,oBAAA,EAAAgG;MAAA;MAnBI+C,EAAA,GAAKF,EAAA,CAAL1G,KAAA;MAAO6G,EAAA,GAAKH,EAAA,CAALxG,KAAA;MAAO4G,EAAA,GAAaJ,EAAA,CAAbnD,aAAA;MAAewD,EAAA,GAAgBL,EAAA,CAAhBzC,gBAAA;MAsB/B+C,EAAA,GAAmB7F,CAAA,CAAyByF,EAAA,EAAQzD,EAAA;MACpD8D,EAAA,GAAsBlG,CAAA,CAA2C;QACnE/C,WAAA,EAAagJ;MAAA;MAGXE,EAAA,GAAiD5M,CAAA,CACnD;QAAA,OAAO;UACH0F,KAAA,EAAO4G,EAAA,IAAS;UAChB1G,KAAA,EAAO2G,EAAA,IAAS;UAChBtD,aAAA,EAAAuD,EAAA;UACA7C,gBAAA,EAAA8C;QAAA,CACF;MAAA,GACF,CAACH,EAAA,EAAOC,EAAA,EAAOC,EAAA,EAAeC,EAAA;MAG5BU,EAAA,GAAQzF,CAAA;IAEd5H,CAAA,CAAU;MACN,IAAyB,SAArB0L,EAAA,CAAS4B,OAAA,EAAb;QAEA5B,EAAA,CAAS4B,OAAA,CAAQtD,KAAA,GAAQkC,EAAA,GAAajG,CAAA,EACtCyF,EAAA,CAAS4B,OAAA,CAAQrD,MAAA,GAASmC,EAAA,GAAcnG,CAAA;QAExC,IAAMpG,CAAA,GAAM6L,EAAA,CAAS4B,OAAA,CAAQC,UAAA,CAAW;QAExC1N,CAAA,CAAIqB,KAAA,CAAM+E,CAAA,EAAYA,CAAA,GAEtBpG,CAAA,CAAI0E,SAAA,GAAY8I,EAAA,CAAMG,UAAA,EACtB3N,CAAA,CAAI4N,QAAA,CAAS,GAAG,GAAGvB,EAAA,EAAYE,EAAA,GAC/BvM,CAAA,CAAI6N,SAAA,CAAU5B,EAAA,CAAO6B,IAAA,EAAM7B,EAAA,CAAO8B,GAAA,GAElChO,CAAA,CAAOiO,OAAA,CAAQ,UAAA/N,CAAA;UACG,YAAVA,CAAA,IAA+B,SAAV2M,EAAA,GACrBA,EAAA,CAAMoB,OAAA,CAAQ,UAAA/N,CAAA;YAAI,OAAI0H,EAAA,CAAW3H,CAAA,EAAKC,CAAA;UAAA,KACrB,YAAVA,CAAA,IAA+B,SAAV0M,EAAA,GAC5BA,EAAA,CAAMqB,OAAA,CAAQ,UAAA/N,CAAA;YAAI,OAAIyC,CAAA,CAAW1C,CAAA,EAAKC,CAAA;UAAA,KACrB,kBAAVA,CAAA,GACP8G,CAAA,CAA8C/G,CAAA,EAAK;YAC/C+D,WAAA,EAAaiJ,EAAA;YACbG,KAAA,EAAAK;UAAA,KAEoB,qBAAVvN,CAAA,IAAkC,SAAV0M,EAAA,IAA4B,SAAVC,EAAA,IACxD3M,CAAA,CAAMD,CAAA,EAAKiN,EAAA,CAEnB;QAAA,EA1B+B;MAAA;IA2BnC,GAAG,CACCpB,EAAA,EACAQ,EAAA,EACAE,EAAA,EACAN,EAAA,CAAO6B,IAAA,EACP7B,EAAA,CAAO8B,GAAA,EACP3H,CAAA,EACArG,CAAA,EACAyN,EAAA,EACAb,EAAA,EACAC,EAAA,EACAlK,CAAA,EACAiF,EAAA,EACAqF,EAAA,EACAC,EAAA;IAGJ,IAAMgB,EAAA,GAAwB1N,CAAA,CAC1B,UAACP,CAAA;QACG,IAAK6L,EAAA,CAAS4B,OAAA,IAAqB,SAAVd,EAAA,EAAzB;UAEA,IAAA1M,CAAA,GAAeuG,CAAA,CAAkBqF,EAAA,CAAS4B,OAAA,EAASzN,CAAA;YAA5CG,CAAA,GAACF,CAAA;YAAEI,CAAA,GAACJ,CAAA;UAEX,OAAO0M,EAAA,CAAMhE,IAAA,CAAK,UAAA3I,CAAA;YAOd,OANyByG,CAAA,CACrBzG,CAAA,CAAKmB,CAAA,EACLnB,CAAA,CAAKoB,CAAA,EACLjB,CAAA,GAAI8L,EAAA,CAAO6B,IAAA,EACXzN,CAAA,GAAI4L,EAAA,CAAO8B,GAAA,KAEY/N,CAAA,CAAKsB,IAAA,GAAO,CAC3C;UAAA,EAZyD;QAAA;MAa5D,GACD,CAACuK,EAAA,EAAUI,EAAA,EAAQU,EAAA;MAGvBuB,EAAA,GAA8CvH,CAAA;MAAtCwH,EAAA,GAAoBD,EAAA,CAApB7C,oBAAA;MAAsB+C,EAAA,GAAWF,EAAA,CAAX5C,WAAA;MAExB+C,EAAA,GAAmB9N,CAAA,CACrB,UAACP,CAAA;QACG,IAAMC,CAAA,GAAOgO,EAAA,CAAsBjO,CAAA;QAC/BC,CAAA,IACAkO,EAAA,CAAqB1N,CAAA,CAAcqJ,EAAA,EAAa;UAAE5J,IAAA,EAAAD;QAAA,IAASD,CAAA,GAC3D8M,EAAA,CAAiB,CAAC7M,CAAA,CAAKe,EAAA,OAEvBoN,EAAA,IACAtB,EAAA,CAAiB,IAEzB;MAAA,GACA,CAACmB,EAAA,EAAuBE,EAAA,EAAsBrE,EAAA,EAAasE,EAAA,EAAatB,EAAA;MAGtEwB,EAAA,GAAmB/N,CAAA,CAAY;QACjC6N,EAAA,IACAtB,EAAA,CAAiB,GACrB;MAAA,GAAG,CAACsB,EAAA,EAAatB,EAAA;MAEXyB,EAAA,GAAchO,CAAA,CAChB,UAACP,CAAA;QACG,IAAK0L,EAAA,EAAL;UAEA,IAAMzL,CAAA,GAAOgO,EAAA,CAAsBjO,CAAA;UAC/BC,CAAA,IACAyL,EAAA,CAAQzL,CAAA,EAAMD,CAAA,CAJJ;QAAA;MAMlB,GACA,CAACiO,EAAA,EAAuBvC,EAAA;IAG5B,OACI7K,CAAA;MACI2N,GAAA,EAAK,SAAAA,CAAAxO,CAAA;QACD6L,EAAA,CAAS4B,OAAA,GAAUzN,CAAA,EACf2L,EAAA,IAAa,aAAaA,EAAA,KAAWA,EAAA,CAAU8B,OAAA,GAAUzN,CAAA,CAC/D;MAAA;MACFmK,KAAA,EAAOkC,EAAA,GAAajG,CAAA;MACpBgE,MAAA,EAAQmC,EAAA,GAAcnG,CAAA;MACtBlE,KAAA,EAAO;QACHiI,KAAA,EAAOkC,EAAA;QACPjC,MAAA,EAAQmC,EAAA;QACRkC,MAAA,EAAQ/E,EAAA,GAAgB,SAAS;MAAA;MAErCpJ,OAAA,EAASoJ,EAAA,GAAgB6E,EAAA,QAAc;MACvC/N,YAAA,EAAckJ,EAAA,GAAgB2E,EAAA,QAAmB;MACjDzN,YAAA,EAAc8I,EAAA,GAAgB4E,EAAA,QAAmB;MACjD5N,WAAA,EAAagJ,EAAA,GAAgB2E,EAAA,QAAmB;IAAA,EAG5D;EAAA;EAEazG,EAAA,GAAgB5B,CAAA,CACzB,UAAAhG,CAAA,EASIC,CAAA;IAAoC,IAPhCE,CAAA,GAAKH,CAAA,CAALmN,KAAA;MAAK9M,CAAA,GAAAL,CAAA,CACL2D,aAAA;MAAApD,CAAA,QAAa,MAAAF,CAAA,GAAGmE,CAAA,CAAmBb,aAAA,GAAatD,CAAA;MAAAI,CAAA,GAAAT,CAAA,CAChDgE,OAAA;MAAArD,CAAA,QAAO,MAAAF,CAAA,GAAG+D,CAAA,CAAmBR,OAAA,GAAOvD,CAAA;MAAAuF,CAAA,GAAAhG,CAAA,CACpCiE,YAAA;MAAAiC,CAAA,QAAY,MAAAF,CAAA,GAAGxB,CAAA,CAAmBP,YAAA,GAAY+B,CAAA;MAC9C+B,CAAA,GAAa/H,CAAA,CAAboN,aAAA;MACGjH,CAAA,GAAU4D,CAAA,CAAA/J,CAAA,EAAA0H,CAAA;IAAA,OAIjB7G,CAAA,CAACuF,CAAA,EAAS;MAAOzC,aAAA,EAAApD,CAAA;MAAeyD,OAAA,EAAArD,CAAA;MAASsD,YAAA,EAAAiC,CAAA;MAAciH,KAAA,EAAAhN,CAAA;MAAOiN,aAAA,EAAArF,CAAA;MAAaiD,QAAA,EACvEnK,CAAA,CAAC8G,EAAA,EAAkBvD,CAAA;QACfT,aAAA,EAAepD;MAAA,GACX4F,CAAA,EAAU;QACdoH,SAAA,EAAWtN;MAAA;IAAA,EAEP;EAAA;ECxPP4H,EAAA,GAA0B7B,CAAA,CAAW,UAI9ChG,CAAA,EACAC,CAAA;IAEA,OACIY,CAAA,CAAC0F,CAAA,EAAiB;MAAAyE,QAAA,EACb,SAAAA,CAAA7K,CAAA;QAAA,IAAGE,CAAA,GAAKF,CAAA,CAALgK,KAAA;UAAO5J,CAAA,GAAMJ,CAAA,CAANiK,MAAA;QAAM,OACbvJ,CAAA,CAAC+G,EAAA,EAAaxD,CAAA;UACV+F,KAAA,EAAO9J,CAAA;UACP+J,MAAA,EAAQ7J;QAAA,GACHP,CAAA,EAAK;UAIVwO,GAAA,EAAKvO;QAAA,GACP;MAAA;IAAA,EAIlB;EAAA;AAAA,SAAAuH,CAAA,IAAA0F,OAAA,EAAAtF,EAAA,IAAA8G,aAAA,EAAAjH,CAAA,IAAA4F,iBAAA,EAAAxF,EAAA,IAAA8G,uBAAA,EAAAnK,CAAA,IAAAoK,kBAAA,EAAAlM,CAAA,IAAAmM,kBAAA,EAAA1K,CAAA,IAAA2K,eAAA,EAAAlJ,CAAA,IAAAC,UAAA,EAAAqB,CAAA,IAAAmD,kBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}