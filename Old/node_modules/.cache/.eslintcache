[{"/gsoc/git/d3js/src/index.tsx":"1","/gsoc/git/d3js/src/Data.tsx":"2","/gsoc/git/d3js/src/SimilarArtistsGraph.tsx":"3","/gsoc/git/d3js/src/artist-search/SearchDropdown.tsx":"4","/gsoc/git/d3js/src/artist-search/SearchItem.tsx":"5","/gsoc/git/d3js/src/artist-search/SearchBox.tsx":"6","/gsoc/git/d3js/src/artist-search/ArtistLookup.ts":"7"},{"size":272,"mtime":1689295113856,"results":"8","hashOfConfig":"9"},{"size":6633,"mtime":1689618000635,"results":"10","hashOfConfig":"9"},{"size":4636,"mtime":1689918996467,"results":"11","hashOfConfig":"9"},{"size":756,"mtime":1689836568025,"results":"12","hashOfConfig":"9"},{"size":519,"mtime":1689913507942,"results":"13","hashOfConfig":"9"},{"size":5579,"mtime":1689836297906,"results":"14","hashOfConfig":"9"},{"size":1073,"mtime":1689873225297,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"qsvosg",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/gsoc/git/d3js/src/index.tsx",[],[],[],"/gsoc/git/d3js/src/Data.tsx",["39"],[],"import React, {useState, useEffect} from \"react\";\nimport SimilarArtistsGraph from \"./SimilarArtistsGraph\";\nimport tinycolor from \"tinycolor2\";\nimport SearchBox from \"./artist-search/SearchBox\";\n\ntype ArtistType = {\n    artist_mbid: string;\n    name: string;\n    comment?: string;\n    type?: string;\n    gender?: string;\n    score?: number;\n    reference_mbid?: string;\n}\n    \ntype MarkupResponseType = {\n    data: string;\n    type: \"markup\";\n}\n\ntype DatasetResponseType = {\n    columns: Array<string>;\n    data: Array<ArtistType>;\n    type: \"dataset\";\n}\n\ntype ApiResponseType = Array<MarkupResponseType | DatasetResponseType>;\n\ntype NodeType = {\n    id: string;\n    artist_mbid: string;\n    size: number;\n    color: string;\n    score: number;\n}\n\ntype LinkType = {\n    source: string;\n    target: string;\n    distance: number;\n}\n\ntype GraphDataType = {\n    nodes: Array<NodeType>;\n    links: Array<LinkType>;\n}\n\nconst colorGenerator = ():  tinycolor.Instance=> {\n    var color = tinycolor(\"hsv(\" + Math.random() * 360 + \", 90%, 90%)\");\n    return color;\n}\n\nconst Data = () => {\n    const ARTIST_MBID = \"8f6bd1e4-fbe1-4f50-aa9b-94c450ec0f11\";\n    const SIMILAR_ARTISTS_LIMIT_VALUE = 18;\n    const BASE_URL = \"https://labs.api.listenbrainz.org/similar-artists/json?algorithm=session_based_days_7500_session_300_contribution_5_threshold_10_limit_100_filter_True_skip_30&artist_mbid=\";\n    // Serves as the maximum distance between nodes\n    const LINK_DIST_MULTIPLIER = 250;\n    // Serves as the minimum distance between nodes\n    const MIN_LINK_DIST = 0;\n    // Size of the main node\n    const MAIN_NODE_SIZE = 150;\n    // Size of the similar nodes\n    const SIMILAR_NODE_SIZE = 85;\n    // Apha value of the background color of the graph\n    const BACKGROUND_ALPHA = 0.2;\n    const COLOR_MIX_WEIGHT = 0.3;\n    // Score in case it is undefined (as in case of main artist)\n    const NULL_SCORE = Infinity;\n\n    var color1 = colorGenerator();\n    var color2 = color1.clone().tetrad()[1];\n    const [similarArtistsList, setSimilarArtistsList] = useState<Array<ArtistType>>();\n    const [mainArtist, setMainArtist] = useState<ArtistType>();\n    const [similarArtistsLimit, setSimilarArtistsLimit] = useState(SIMILAR_ARTISTS_LIMIT_VALUE);\n    const [colors, setColors] = useState([color1, color2]);\n    const [artistMBID, setArtistMBID] = useState(ARTIST_MBID);\n\n    var scoreList: Array<number> = [];\n    \n    const fetchData = async (ARTIST_MBID: string): Promise<void> => {\n        try {\n          const response = await fetch(BASE_URL + ARTIST_MBID);\n          const data = await response.json();\n          processData(data);\n        }\n        catch (error){\n          //Error message goes here.\n          alert(\"Something went wrong while loading information, please try again\");\n        }\n    }\n    \n    const processData = (dataResponse: ApiResponseType): void => {\n        // Type guard for dataset response\n        const isDatasetResponse = (response: MarkupResponseType | DatasetResponseType): \n        response is DatasetResponseType => {\n            return response.type === \"dataset\";\n        }\n        // Get the datasets out of the API response\n        const artistsData = dataResponse.filter(isDatasetResponse);\n        if(artistsData.length){\n            // Get the main artist from the first dataset\n            setMainArtist(artistsData[0].data[0]);\n            // Get the similar artists from the second dataset\n            const similarArtistsResponse = artistsData[1];\n            if(similarArtistsResponse?.data?.length){\n                setSimilarArtistsList(similarArtistsResponse.data.slice(0, similarArtistsLimit));\n            }\n            // In case no similar artists are found\n            else{\n                setSimilarArtistsList([]);\n            }\n        }\n        setColors([tinycolor.mix(color1, color2, COLOR_MIX_WEIGHT), color2]);\n    }\n    \n    // Update the graph when either artistMBID or similarArtistsLimit changes\n    useEffect(() => {\n        fetchData(artistMBID);\n    }, [artistMBID, similarArtistsLimit]);\n\n    // Calculating minScore for normalization which is always the last element of the array (because it's sorted)\n    var minScore = similarArtistsList?.[similarArtistsLimit - 1]?.score ?? 0;\n    minScore = Math.sqrt(minScore);\n\n    // Transforming the data into the format required by the graph\n    let transformedArtists: GraphDataType = {\n        nodes: [],\n        links: []\n    };\n    // Checking if mainArtist is defined\n    if(mainArtist) {\n        transformedArtists = {\n            nodes: [mainArtist, ...similarArtistsList!].map((similarArtist: ArtistType, index: number): NodeType => {\n                let computedScore;\n                let computedColor;\n                if(similarArtist !== mainArtist) {\n                    computedScore = minScore / Math.sqrt(similarArtist?.score ?? NULL_SCORE);\n                    computedColor = tinycolor.mix(colors[0], colors[1], (index / similarArtistsLimit * computedScore) * 100);\n                    scoreList.push(computedScore);\n                }\n                else {\n                    computedColor = colors[0];\n                }\n                return {\n                    id: similarArtist.name,\n                    artist_mbid: similarArtist.artist_mbid,\n                    size: similarArtist.artist_mbid === mainArtist?.artist_mbid ? MAIN_NODE_SIZE : SIMILAR_NODE_SIZE,\n                    color: computedColor.toRgbString(),\n                    score: similarArtist.score ?? NULL_SCORE\n                };\n            }),\n            links: similarArtistsList!.map((similarArtist: ArtistType, index: number): LinkType => {\n                return {\n                    source: mainArtist?.name ?? \"\",\n                    target: similarArtist.name,\n                    distance: scoreList[index] * LINK_DIST_MULTIPLIER + MIN_LINK_DIST,\n                };\n            }),\n        }\n    }\n    const backgroundColor1 = colors[0].clone().setAlpha(BACKGROUND_ALPHA).toRgbString();\n    const backgroundColor2 = colors[1].clone().setAlpha(BACKGROUND_ALPHA).toRgbString();\n    const backgroundGradient = `linear-gradient(` + backgroundColor1 + `,` + backgroundColor2 + `)`;\n    return (\n        <div>\n            <SearchBox onArtistChange={setArtistMBID} currentArtistMbid={artistMBID} onsimilarArtistsLimitChange={setSimilarArtistsLimit} currentsimilarArtistsLimit={similarArtistsLimit}/>\n            <SimilarArtistsGraph onArtistChange={setArtistMBID} data={transformedArtists} background={backgroundGradient}/>\n        </div>\n    );\n}\n\nexport default Data;\nexport type { GraphDataType, NodeType, LinkType, ArtistType};","/gsoc/git/d3js/src/SimilarArtistsGraph.tsx",["40","41","42","43"],[],"/gsoc/git/d3js/src/artist-search/SearchDropdown.tsx",[],[],"/gsoc/git/d3js/src/artist-search/SearchItem.tsx",[],[],"/gsoc/git/d3js/src/artist-search/SearchBox.tsx",["44","45","46"],[],"/gsoc/git/d3js/src/artist-search/ArtistLookup.ts",["47","48"],[],{"ruleId":"49","severity":1,"message":"50","line":120,"column":8,"nodeType":"51","endLine":120,"endColumn":41,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":16,"nodeType":"55","messageId":"56","endLine":1,"endColumn":24},{"ruleId":"53","severity":1,"message":"57","line":2,"column":40,"nodeType":"55","messageId":"56","endLine":2,"endColumn":49},{"ruleId":"58","severity":1,"message":"59","line":60,"column":23,"nodeType":"60","messageId":"61","endLine":60,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":80,"column":30,"nodeType":"60","messageId":"61","endLine":80,"endColumn":32},{"ruleId":"53","severity":1,"message":"63","line":1,"column":28,"nodeType":"55","messageId":"56","endLine":1,"endColumn":35},{"ruleId":"49","severity":1,"message":"64","line":37,"column":8,"nodeType":"51","endLine":37,"endColumn":21,"suggestions":"65"},{"ruleId":"49","severity":1,"message":"66","line":49,"column":8,"nodeType":"51","endLine":49,"endColumn":41,"suggestions":"67"},{"ruleId":"53","severity":1,"message":"68","line":17,"column":9,"nodeType":"55","messageId":"56","endLine":17,"endColumn":40},{"ruleId":"53","severity":1,"message":"69","line":18,"column":11,"nodeType":"55","messageId":"56","endLine":18,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["70"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'LinkProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useMemo' is defined but never used.","React Hook useEffect has a missing dependency: 'getArtists'. Either include it or remove the dependency array.",["71"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["72"],"'resultsArray' is assigned a value but never used.","'UNDEFINED_PROPERTY' is assigned a value but never used.",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [artistMBID, fetchData, similarArtistsLimit]",{"range":"79","text":"80"},"Update the dependencies array to be: [getArtists, searchQuery]",{"range":"81","text":"82"},"Update the dependencies array to be: [similarArtistsLimit, artistMbid, props]",{"range":"83","text":"84"},[4012,4045],"[artistMBID, fetchData, similarArtistsLimit]",[1594,1607],"[getArtists, searchQuery]",[2123,2156],"[similarArtistsLimit, artistMbid, props]"]